{
  
    
        "post0": {
            "title": "Student Lesson Grades",
            "content": "Lesson | Grades | . 3.1 &amp; 3.2 | 1/1 | . 3.3 &amp; 3.4 | Presentation: 3.6/4 | . 3.5 - 3.7 | 0.9/1 | . 3.8 &amp; 3.10 | 0.9/1 | . 3.9 &amp; 3.11 | 0.9/1 | . 3.12 &amp; 3.13 | 0.88/1 | . 3.14 &amp; 3.15 | 1/1 | . 3.16 | N/A | . 3.17 &amp; 3.18 | N/A | .",
            "url": "https://haeryny.github.io/haehae/notes/2022/12/15/Student-Lesson-Grades.html",
            "relUrl": "/notes/2022/12/15/Student-Lesson-Grades.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Video 3.17-18 Hacks",
            "content": "Notes . 3.17.1 . A problem is a description of a task that may or may not be able to be solved through the use of an algorithm. An instance of a problem includes a specific input. One example of this type of problem is a sorting problem. | A decision problem is a problem with a binary answer (yes or no). An optimization problem is a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. | An algorithm&#39;s efficiency is determine through formal or mathematical reasoning. | . It is important to know which algorithm is the most efficient and if the algorithm can work for that specific situation. . 3.17.2 . An algorithm is a process or set of rules to be followed in calculations or other problem-solving operations. . There are four different types of algorithms. . 1 step: The first step consists of an integer being multiplied by a variable &#39;n&#39;. An example of this could be 5 * n. Linear | . | 2 step: A two-step algorithm consists of an integer to the power of the variable &#39;n&#39;. Exponential | . | 3 step: A three-step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. Square | . | 4 step: A four-step algorithm is a variable factorial. For instance, 5! = 5 4 3 2 1 = 120. Factorial | . | . When an algorithm is linear or square, it runs in a reasonable amount of time. However, if the algorithm is exponential or factorial, they are considered to be run in an unreasonable amount of time. A &quot;reasonable amount of time&quot; is when the algorithm increases by smaller values instead of jumping from a lower value to a much higher value. . Run Times . We can categorize the run time of an algorithm according to how the number of steps increases as the input size increases. Does it always take the same amount of time? That&#39;s a constant increase, a very fast run time. Does it always require looking at every possible permutation of the input? That&#39;s an exponential increase, a very slow run time. Most run times are somewhere between. . Constant Time . When an algorithm runs in constant time, it means that it always takes a fixed number of steps, no matter how large the input size increases. . Linear Time . When an algorithm grows in linear time, its number of steps increases in direct proportion to the input size. . Quadratic Time . When an algorithm grows in quadratic time, its steps increase in proportion to the input size squared. Several list sorting algorithms run in quadratic time, like selection sort. That algorithm starts from the front of the list, then keeps finding the next smallest value in the list and swapping it with the current value. . Exponential Time . When an algorithm grows in superpolynomial time, its number of steps increases faster than a polynomial function of the input size. An algorithm often requires superpolynomial time when it must look at every permutation of values. . Polynomial time describes any run time that does not increase faster than n^k which includes Constant time, Quadratic time, and other higher degree polynomials. Superpolynomial time describes any run time that does increase faster than n^k which includes Exponential time and factorial time. So polynomial is considered reasonable. . 3.18 . What is a decidable problem? . These are problems for which algorithms can be written to solve/produce a correct output for all possible inputs. . What is an undecidable problem? . These are problems for which no algorithms can be built that can provide a correct yes or no answer. Undecidable problems may have some instances of algorithmic solutions, but there are no algorithmic solutions that can solve all instances of the problem. . Vocabulary . Undecidable problem:problems for which no algorithms can be built that can provide a correct yes or no answer or a solution | Decidable problem:problems for which algorthms could be written to solve/produce a correct output for all inputs. | . Hacks . Hack 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . Answer: A decidable problem is a problem for which algorithms can be written to solve/produce a correct output for all possible inputs. An example is if checking if a specific number is odd or even. . num = 7 if num % 2 == 1: print(&quot;is odd&quot;) else: print(&quot;is even&quot;) . is odd . An undecidable problem is a problem for which no algorithms can be built that can provide a correct yes or no answer. An example is trying to find what the weather is going to be in a million years, no one can know because no one has traveled a million years. . Hack 2 . Which of the following is a 3 step algorithm? . Answer: It would be C because a 3 step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. and C is (3 x 8)^2 so n = 8 and it squared so it is 3 step. . Hack 3 . Rewrite this JavaScript Code in a more efficient way . Answer: When there were two else&#39;s I just made one shorter and made it more efficient. . function peak_finder(array) let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . Hack 4 . Rewrite this Python Code in a more efficient way . Answer: You can just use the sort function instead of doing all the code to do it from scratch. . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] data.sort() print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Hack 5 . Rewrite this Python Code in a more efficient way . Answer: You can just use the permutations function instead of doing all the code from scratch. . from itertools import permutations comb = permutations([1, 2, 3], 3) for i in comb: print(i) . (1, 2, 3) (1, 3, 2) (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1) .",
            "url": "https://haeryny.github.io/haehae/week6/notes/2022/12/14/3.17-18-Hacks-and-Notes.html",
            "relUrl": "/week6/notes/2022/12/14/3.17-18-Hacks-and-Notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Panel Notes Extra Credit",
            "content": "Kathyleen Beveridge . She believes that in her life it is important to live with compassion. She graduated as a finance major but then switched her career to high-tech. She started at Qualcomm but switched to a more biotech company: Thermo Fisher Scientific. . HP Inc: Create technology that makes life better for everyone, everywhere. | Qualcomm: Inventing the tech the world loves | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer. | . They are all similar in the way where they want to help the world and the community around them. . She prefers high-tech because they all want to improve the world and does not value money and likes how her current company makes a positive impact on the world. .",
            "url": "https://haeryny.github.io/haehae/2022/12/13/Panel-Extra-Credit-Notes.html",
            "relUrl": "/2022/12/13/Panel-Extra-Credit-Notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Video 3.16 Hacks",
            "content": "Simulations . A simulation is an simpler abstraction of an very complicated natural phenomena. It removes details that are unnecessary or are too difficult to simulate. The level of abstraction in a simulation depends on why we&#39;re creating it in the first place. . Why would you make a simulation? . Safer: Many safety hazards that can be encountered through experimentation can be avoided with simulations. Ex: Designing a boat to travel to an island | Less Expensive: Since real world equipment isn’t needed to make and run a simulation (only computer and programmer needed), this makes simulations an inexpensive way to test something. Ex: Boat example again | Repeatable: Once a simulation is created, it’s easy to repeat it to get different but similar results. | Can Make Predictions: Something that can’t be done with experiments is making predictions. Simulations are useful for this because previous data can be used to predict what will happen in the future. Ex: Global population | . Hacks . Question Answer . Name | Haeryn Yu | . 1 | X | . 2 | X | . 3 | C | . 4 | B | . 5 | C | . 6 | A | . 7 | A | . 8 | X | . 9 | B | . Simulation . import random data = [] for i in range(5): one = random.randint(1, 6) two = random.randint(1, 6) d = { &quot;First Dice&quot;: one, &quot;Second Dice&quot;: two} data.append(d) print(data) . [{&#39;First Dice&#39;: 4, &#39;Second Dice&#39;: 1}, {&#39;First Dice&#39;: 3, &#39;Second Dice&#39;: 1}, {&#39;First Dice&#39;: 6, &#39;Second Dice&#39;: 5}, {&#39;First Dice&#39;: 5, &#39;Second Dice&#39;: 3}, {&#39;First Dice&#39;: 2, &#39;Second Dice&#39;: 5}] .",
            "url": "https://haeryny.github.io/haehae/week5/notes/2022/12/13/3.16-Hacks-and-Notes.html",
            "relUrl": "/week5/notes/2022/12/13/3.16-Hacks-and-Notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Video 3.14-15 Hacks",
            "content": "Notes . 3.14 . Software libraries contain procedures used in creating novel programs. | Existing code segments can be derived from internal or external sources: Libraries, Previously written code. | Libraries simplify complex programs. | APIs (application program interfaces) specify how procedures in libraries should behave and be utilized. | Documentation for APIs/Libraries are necessary to gain proper understanding into how to use them. | . Vocabulary . Term Definition . Documentation | Text that explains the what, how, or why of your code. | . Libraries | A collection of prewritten code or procedures that coders can use to maximize their efficiency | . Application Programming Interface | A type of software through several computers are able to communicate information amongst eachother | . 3.15 . Syntax: . In collegeboard psudo-code RANDOM(a, b) is used to generate a random integer value in the range from a to b. For example if RANDOM(1, 5) is written 1, 2, 3, 4, and 5 have the same chance to show up. In Python the random library can be imported and the min and max ranges can be set to any integer. . Randint: . A general way to to write this is randint(start, stop) where start is the minimum value, stop is the maximum value. And this allows you to generate a random integer from a set range and this can help you create code for things like a coin-flip, dice roll, and anything else which needs an inclusive range. . Randrange: . In general randrange can be written like randrange(start, stop, step) where start is the minimum value, stop is the maximum value (like the randint function), and step is the incriment the values can be and its default value is 1. If start = 0 and step = 5 all the values that can by outputed are 0 and multiples of 5. And if start = 2 and step = 3 the output would be 2 and a multiple of 3 plus 2. . Reflection . I learned about the random function and what documentation, libraries, and application programming interfaces are. The random function has three other functions that are syntax, randint, randrange and they all have different purposes and are way more efficient than coding it from the beginning with just python. This lesson was very good and I learned a lot! . Hacks . Multiple Choice . B because the random functions chooses between the range of numbers and it also includes the numbers. | A because x is the number that starts, y is the number that stops, z is the step this is because that is how they are formatted. | A because random:random, random:shuffle, and random:randit exist and are functions in the library, but random:item doesn&#39;t exist. | Short Answer . It is more efficient and speeds up the process of being able to look through the library rather than creating code that has be made for a word that already exists. For example, the randint function is where start is the minimum value and stop is the maximum value so I do not have to make a new piece of code to use that function. | | import random names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) #The function asks for names to input and is the piece of code that makes a list. names = names_string.split(&quot;,&quot;) #This functions helps seperate the names one by one num_items = len(names) #makes the names into a list random_choice = random.randint(0, num_items - 1) #randint is the the function where start is the minimum which is 0 and the stop is maximum which is num_items - 1. person_who_will_pay = names[random_choice] #This chooses the random name print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) #This is the output. . Coding Challenges . Create a program to pick five random names from a list of at least 15 names | import random names = [&quot;John&quot;, &quot;Jake&quot;, &quot;Jack&quot;, &quot;Alex&quot;, &quot;Ryan&quot;, &quot;Jaiden&quot;, &quot;Jayden&quot;, &quot;Jaden&quot;, &quot;Ethan&quot;, &quot;Emily&quot;, &quot;Ella&quot;, &quot;Ellie&quot;, &quot;Hailey&quot;, &quot;Kaylee&quot;, &quot;Bob&quot;] i = 0 print(&quot;5 random names are&quot;) while i &lt; 5: print(random.choice(names)) i += 1 . 5 random names are Jayden Hailey John Ellie Alex . Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins | import random oneFirstRoll = random.randrange(1,6) oneSecondRoll = random.randrange(1,6) oneScore = oneFirstRoll + oneSecondRoll twoFirstRoll = random.randrange(1,6) twoSecondRoll = random.randrange(1,6) twoScore = twoFirstRoll + twoSecondRoll if oneScore &gt; twoScore: print (&quot;Player one won with a score of&quot;,playerOne()) print (&quot;Player two lost with a score of&quot;,playerTwo()) else: print (&quot;Player two won with a score of&quot;,playerTwo()) print (&quot;Player one lost with a score of&quot;,playerOne()) . Player one won with a score of 6 Player two lost with a score of 3 . Extra Credit . import random direction = [&quot;up&quot;, &quot;down&quot;, &quot;left&quot;, &quot;right&quot;] itemDirection = random.choices(direction) print(f&quot;Initial direction of the robot: {itemDirection}&quot;) startNumber = random.randrange(1,25) print(f&quot;Where the robot started: {startNumber}&quot;) goalPosition = [] for i in range(1): r=random.randrange(1,25) if r != startNumber: goalPosition.append(r) print(f&quot;The goal position is: {goalPosition}&quot;) obstacles = [] for i in range(12): r=random.randint(1,25) if r != startNumber: obstacles.append(r) if r != goalPosition: obstacles.append(r) if r not in obstacles: obstacles.append(r) print(f&quot;The obstacles are at: {obstacles}&quot;) ## I tried to make it so the program wouldn&#39;t repeat the same number twice and it worked but it doubles the number. . Initial direction of the robot: [&#39;down&#39;] Where the robot started: 11 The goal position is: [16] The goal position is: [21, 21, 7, 7, 13, 13, 5, 5, 8, 8, 11, 15, 15, 10, 10, 17, 17, 16, 16, 3, 3, 19, 19] .",
            "url": "https://haeryny.github.io/haehae/week5/notes/2022/12/12/3.14-15-Hacks-and-Notes.html",
            "relUrl": "/week5/notes/2022/12/12/3.14-15-Hacks-and-Notes.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Video 3.12-13 Hacks",
            "content": "Notes . 3.12 Notes . What is a procedure and a parameter? . A procedure is a named group of programming instructions that may have parameters and return values. . Procedures can be reffered to as method or function depending on the programing language. . A procedrure call interrupts an execution of statements and makes the program execute the statements in the procedure. | Parameters are input values of a procedure. | . Arguements specifcy the values of the parameters when a procedure is called. . If you have a set of statements and inside there is a procedure then when it reaches that procedure it will excute that procedure and then go back to the rest of the statments. . If you see a return statement you automatically end the procedure even if there is more statements . Procedures are that a catch-all term for codes used to identify what was done to or given to a patient | . If you have a set of statements in a procedure the statement will go thought the top of the procedure to the bottom in order. . 3.13 Notes . Procedure: is a named group of programming instructions that serves a purpose | Parameter: are input values of a procedur | There are two types of procedures, one that returns a value or some type of data and on that just executes a block of statements | Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | . Creating a Procedure . When you are picking a name for the procedure it must be descriptive | See if you need any parameters for this procedure (what data do you need to accomplish my goal? What king of information am I going to need?) | 2 of the parameters in the example below could be the quizGrade and currentPoints (need this data) | One common type of abstraction is procedrual abstraction, which provides a name for a process and allows a procedure to be only knowing what it doe,not how it does it. The subdivision of a computer program into sepearate subprogrames is called modularity. . How do we make our procedure purposeful and consice . to make a procedure serve a purpose it should be able to have multiple functions | Also to keep a procedure maximizing capability it should be simple and reduced to get the final result | . What is important to do while writing procedures . It is important to understand you procudeures procedure does when creating one as it will help you create a impactful procedure . Hacks . 3.12 Part 1 Hacks . Problem 1: This problem involves parameters | . Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed = Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) | . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . False . Problem 3: Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. | . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . 3.12 Homework/Hacks part 2 . a = 729 . the cost is $190.30 . answer = 39.444 . 3.13 Hacks . Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) | if currentrbyards(1260) &gt; toprbyardspg(100) replace(toprbyardspg(100), currentrbyards(1260), totalGames(12)) currentrbyards(1260)/ totalGames(12) = 105 . Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . | Which Is the Correct Way to define the Name of a Procedure? . | B. PROCEDURE MyList . because procedure should be in all caps and part of the procedure name should be capitalized . Write A Procedure That gets the BeachBall To the Green Square PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } |",
            "url": "https://haeryny.github.io/haehae/week4/notes/2022/12/08/3.12-13-Hacks-and-Notes.html",
            "relUrl": "/week4/notes/2022/12/08/3.12-13-Hacks-and-Notes.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Video 3.8-10 Hacks",
            "content": "Notes 3.8-10 . Section 8 . Understanding What is Iteration | Using for and while loops | . Necessary Vocabulary . Iteration - Repitition of a Process | For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated | While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. | Condition - Allows the computer to know whether or not to keep repeating the loop. | increment/decrement - Modifies the counter variable after each repetition. | . What is Iteration? . Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. . In College Board&#39;s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. . The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. . Conceptually, a while loop is very similar to an if conditional, except that a while is continually executed until it&#39;s no longer true and an if is only executed once. . Section 10 . Understanding how to edit lists by adding, inserting, and removing data | Using loops to iterate through lists and abstract data | Determine the results or side effects of iteration statements | Write sorting algorithms using iteration | . Necessary Vocabulary . Indexing / List Index - The position of an element in a list, starting from 0 | append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Elements [in a list] - An item in a list. | Nesting - Having one data type or function inside another data type or function, such as lists or loops. | array - Another name for a list, depends on the language | . What are Lists? . Lists are a collection of data in a sequence that is an iterable | Each sequence is demarcated with an index, starting from 0. This is known as base 0 indexing | In memory, it is stored as a variable name with multiple pointers to each variable stored in a certain order | Lists can also be called arrays | Lists have methods that act upon the list and change them. This moves the pointers within RAM to change the parts of the list. | . Nested Lists . Uses of Nested lists . Placing lists within lists allows you to have arrays of similar data together, and create complexity. . Some uses include: . Creating 2d Arrays | Storing similar, but slightly different categories (sublists) | Create a matrix | . Quiz Score . I got 9/10 right on the quiz, and I got the fourth question wrong. I got it wrong because I thought extend would add something to the list, but extend actually combines two list while append is used to add an element to the end of the list, so that is why I got it wrong. . Excercises . Excercise 1 . Task: Reverse a list utilizing features of lists and iteration | . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list print(&quot;List after reverse : &quot;, reversed_list) . List before reverse : [1, 2, 3, 4, 5] List after reverse : [5, 4, 3, 2, 1] . Excercise 2 . Task: Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array. Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array | . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] .",
            "url": "https://haeryny.github.io/haehae/week3/notes/2022/12/05/3.8-10-Hacks-and-Notes.html",
            "relUrl": "/week3/notes/2022/12/05/3.8-10-Hacks-and-Notes.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Video 3.5-7 Hacks",
            "content": "Unit 3 Section 5 . Learning Objectives . Write expressions with logical operators | Evaluate expressions that use logical operators | . Vocab . Boolean binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; . Relational Operators . There are multiple operators which are used to evaluate 2 variables. In pseudocode the relational operators are =, &gt;, &lt;, ≠, ≥, and ≤. Other languages use different formats to represent these operators. For example, Python uses != instead of ≠. These operators help determine the boolean value of a statement. . Logical Operators . Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. Javascript uses the same logic, but uses different ways to represent the operators: &amp;&amp;(and), | |(or), |(not). . Operators and booleans can be very useful, allowing a program to create an algorithm based on user inputs items stored in list. For example, operators can be used to perform multiple operations on lists. . Unit 3 Section 6 . Learning Objectives . Write conditional statements | Determine the result of conditional statements | . Vocab . Algorithm: Finite set of instructions that accomplish a specific task . Conditional Statements . Conditional statements allow the code to act based on multiple conditions, such as user input or stored data. | We can use conditionals in algorithms in order to receive different outputs from a set of code, and help achieve the general purpose of the algorithm. | . Categories . Two broad types of conditional statements are if statements and if-else statements . if statement: will go through certain statements if the if expression is true | if-else statement: will go through a statement no matter what, but the statement which is run depends on the if expression is true or false | . Flow Charts . We can use flowcharts to help organize the process of conditional statements. | This allows us to diagram the work and have an image of what the process will look like | . A flowchart . We can use this to write pseudocode. . S &lt;-- 12 IF (S MOD 2 = 0) { DISPLAY (S) } ELSE { DISPLAY (&quot;This number is not even.&quot;) } . Converting this to a sequence of python code is very easy thanks to having an easy plan to follow. . Unit 3 Section 7 . Learning Objectives . Write nested conditional statements Determine the result of nested conditional statement . Vocab . Nested conditional: A conditional inside of a conditional . Nested Conditionals . Nested conditionals are often used in algorithms in order to print specific data or run certain tasks. . We can use conditionals inside conditionals to create further conditions in algorithms. . We can use flowcharts to help display an easy to understand diagram of what we want a code segment to do. . Flowchart . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | . 2. 10(D) ≠ 0110(B) . B. False | . 3. 56(D) ≥ 111000(B) . A. True | . 3. 99(D) &lt; 1110011(B) . A. True | . AND Operator Value 1 Value 2 Result . 1 | 0 | 1 | . 1 | 0 | 0 | . 1 | 1 | 0 | . 1 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 0 | . 0 | 0 | 1 | . 0 | 1 | 1 | . 0 | 1 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . # Practice with these statements print(20 == 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &gt; y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z) . True False False . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | 2. How is an if statement different from an if-else statement. . An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If-else statement | 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? 3 print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) if i == &quot;lion&quot;: # What boolean value does this statement cause? 3 print(&quot;It lives in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . It lives in the desert tiger wildebeest Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! shark jellyfish blobfish raven . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . InfoDb = [] # Append to List a Dictionary InfoDb.append({ &quot;foodName&quot;: &quot;Chicken Alfredo&quot;, &quot;meat&quot;: &quot;Chicken&quot;, &quot;timeToPrepare&quot;: &quot;60 minutes&quot;, }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;foodName&quot;: &quot;Cheese Quesadilla&quot;, &quot;meat&quot;: &quot;None&quot;, &quot;timeToPrepare&quot;: &quot;10 minutes&quot;, }) # Append to List a 3rd Dictionary of key/values InfoDb.append({ &quot;foodName&quot;: &quot;Beef Wellington&quot;, &quot;meat&quot;: &quot;Beef&quot;, &quot;timeToPrepare&quot;: &quot;150 minutes&quot;, }) # given and index this will print InfoDb content def print_data(d_rec): print(d_rec[&quot;foodName&quot;], &quot;Time to Prepare:&quot;, d_rec[&quot;timeToPrepare&quot;]) # using comma puts space between values print(&quot;Meat:&quot;, d_rec[&quot;meat&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;&quot;) for record in InfoDb: print_data(record) for_loop() . Chicken Alfredo Time to Prepare: 60 minutes Meat: Chicken Cheese Quesadilla Time to Prepare: 10 minutes Meat: None Beef Wellington Time to Prepare: 150 minutes Meat: Beef . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . They would get 3.0. .",
            "url": "https://haeryny.github.io/haehae/week3/notes/2022/12/04/3.5-7-Hacks-and-Notes.html",
            "relUrl": "/week3/notes/2022/12/04/3.5-7-Hacks-and-Notes.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Video 3.3-4 Hacks",
            "content": "",
            "url": "https://haeryny.github.io/haehae/week2/notes/2022/12/03/3.3-4-Hacks-and-Notes.html",
            "relUrl": "/week2/notes/2022/12/03/3.3-4-Hacks-and-Notes.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Video 3.1-2 Hacks",
            "content": "3.1.1 Notes . Variables and Assignments . Essential Knowledge: . A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. | Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. | Some programming languages provide types to represent data, which are referenced using variables. These types include numbers, Booleans, lists, and strings. | Some values are better suited to representation using one type of datum rather than another. | . What is a variable? . An abstraction inside a program that can hold a value | . An example naming variables . You want to store the highest score you scored in a game. So, you want to call this variable highScore | You want to store a name, so you can call the variable firstName | It is also possible to store true or false in a variable. For example, the variable could be called isSunny, where true and false are stored in the variable. | phoneNumber could be a variable that stores phone numbers. | These examples are short and convenient as opposed to a long description | However, they give insight to the basic goal of the variable. | Spaces also cause a problem because it is not allowed | Dashes and numbers are also less ideal. | . Data Type examples . highScore --&gt; an integer probably doing addition or subtraction, save it as an integer or numbers. | . | firstName --&gt; text(or string) since a name is text, it should be saved as a string | . | isSunny --&gt; boolean only gives two options: true or false within variable | . | phoneNumber --&gt; text(string) no math involved just a string of numbers | . | . Practice . Question: What would be the best variable name and data type to store a user&#39;s age in a program? . Answer: name: age data type: integer | . Q: What would be the best variable name and data type to store the number of students in your class? . A: name: numStudents data type: integer to add and subtract | . Q: What would be the best variable name and data type to store the title of a movie? . A: name: movieTitle data type: text(or string) | . Q: What would be the best variable name and data type to store if someone&#39;s pet is a dog. . A: name: isDog data type: boolean | . 3.1.2 Notes . What will you learn? . You will learn how to determine the value of a variable as a result of an assignment. . Essential Knowledge . The assignment operater allows a program to change the value represented to a variable. | The exam reference sheet uses the &quot;⟵&quot; to use for assignment. For example, Text: a ⟵ expression Then the code would display a block text of &quot;a ⟵ expression&quot;. The code will evaluate expression and then assigns a copy of the result to the variable a. | The value stored in a variable will be the most recent value assigned. For example, . a ⟵ 1 | a ⟵ b | a ⟵ 2 . display(b) . | . | . The code will display 1. . Storing Values . When storing values, you assign them to a variable. . Examples: . highScore ⟵ 100 | The highScore is my assignment operator and it is storing the value of 100 inside itself as a variable. This will set my highScore to 100. | . firstName ⟵ &quot;Ashley&quot; | The firstName is the variable and the text we are storing inside is &quot;Ashley.&quot; We know that the name is in text because of the quotation marks around the assignment. | . isRaining ⟵ true | The isRaining variable has the intention to be a Boolean variable which checks true or false, but it&#39;s been assigned to store the value true. | . phoneNumber ⟵ &quot;555-0101&quot; | The phoneNumber variable and the number we are storing is &quot;555-0101&quot; The number is written within text because we are not planning to do math with this number. | . Additional Vocabulary . Elements: individual value in a list that is assigned a unique index. And elements are referenced by an index. . Index: referencing elements in a list or string using natural numbers . 3.2.2 Notes . Lists . Lists allow for data abstraction . Variables like strings, numbers, characters, and more can be bundled together | It could be empty from the start and you can add more variables as needed | If you set one list equal to another list, or transfer data from one list to another, the data will be completely replaced. | You can also append data from one list to another, keeping the old data and adding the new data. | . Key Vocabulary . list: a sequence of several variables grouped together | variable: a way of storing information in a computer program, which could later be changed, referenced, and used | data types: a set of values and operations on those values | abstract data types: a data type whose internal representation is hidden from the client | client: a program that uses a data type | objects: a structure that can take on a data-type value | Applications programming interface (API): which is a list of constructors and instance methods or operations, used to specify the behavior of an abstract data type | . Big Ideas . Lists can store any types of elements. | In all lists operations, if a list index is less than 1 or greater than the length of the list, an error message is made and the program will terminate. | Data abstraction provides a separation between the abstract properties of a data type and the concrete details of its representation. | 3.1.1 Hacks . Question 1: . The answer is 1 because it is counting a number that is changing so it is integer. | . Question 2: . The answer is 3 because it is a true or false question. | . Question 3: . The answer is 1 because it is a number that is not changing. | . Question 4: . The answer is 2 because it is too long. | . Question 5: . The answer is 1 because it is true or false. | . Question 6: . The answer is 4 because it is true statements. | . Practice Questions I made: . To check if the weather is good or not, what should it be? It is weatherGood and boolean | To record the highest test score, what should it be? It is highTestScore and string | To record the color of the phone, what should it be? It is phoneColor and string | 3.1.2 Hacks . I got the last question wrong, and that&#39;s because I forgot which order it went and that it does not repeat at all. I now know that the correct answer is because the variables have values thanks to the previous five statements. In the sixth sentence, b is given the value of x + b, which is 40. The seventh sentence gives a the value of x + 1, or 21. The value of c + d / 2 is assigned to d in the ninth sentence. Division takes priority over addition in the order of operations. The number 50 is given to d since c is 30 and d / 2 is 20. The values of a, b, c, and d are shown in the final four assertions. . Practice Questions I made: . Question 1 | . num1 &lt;- 8 . num2 &lt;- 3 . num2 &lt;- num1 + num2 . DISPLAY(num2) = 11 . Question 2 | . A &lt;- 4 . B &lt;- 5 . X &lt;- A . DISPLAY(B) = 5 . Question 3 | . Y &lt;- 1 . Z &lt;- 2 . W &lt;- Y . DISPLAY(W) = 1 . Question 4 | . T &lt;- 45 . D &lt;- 12 . X &lt;- T + D . DISPLAY(X) = 57 . Question 5 | . testA &lt;- 40 . testB &lt;- 50 . testC &lt;- 60 . testAll &lt;- testA + testB + testC . DISPLAY(testAll) = 150 . Question 6 | . labD &lt;- 1 . labE &lt;- 2 . labD &lt;- labE . DISPLAY(B) = 1 . 3.2.2 Hacks . Question 1: 7 . Question 2: 11 . Question 3: 107 . Question 4: 1100 . Question 5: 101100 . Question 6: 11111110 . Question 7: 4 . Question 8: 1 . Question 9: 3 . Question 10: 4 . Question 11: 4 . Question 12: 2 . Question 13: 3 . Question 14: 2 . Question 15: 6 .",
            "url": "https://haeryny.github.io/haehae/week2/notes/2022/12/02/3.1-2-Hacks-and-Notes.html",
            "relUrl": "/week2/notes/2022/12/02/3.1-2-Hacks-and-Notes.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Binary Hacks",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Binary Converter",
            "url": "https://haeryny.github.io/haehae/2022/10/28/Binary-Hacks.html",
            "relUrl": "/2022/10/28/Binary-Hacks.html",
            "date": " • Oct 28, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://haeryny.github.io/haehae/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page7": {
          "title": "Vocabulary",
          "content": "Unit 2 Binary/Data Terms . bits: the minimum unit of binary information stored in a computer system. A bit can have only two states, on or off, which are commonly represented as ones and zeros. In our binary markdown we used to change the number of bits. . | bytes: A group of eight bits put together is known as a byte. A byte consists of 256 different combinations if you include the number 00000000 — all the binary numbers between 00000000 and 11111111. . | hexadecimal/nibbles: Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters – A, B, C, D, E and F. For example, when we use Javascript to change the color of the background on our blogs, we use hexadecimals like #eb4034, which would give us a red color. . | RGB- Hexadecimal is basically a short code for RGB color, they are simply different ways of communicating the same thing – a red, green, and blue color value. For example, (235, 64, 52) is the RGB for RED. Here’s an example of how it is implemented in our fastpages: a { color: rgb(255,255, 255) !important; } . | boolean- value that is either true or false . | . Unit 3 Algorithm/Programming Terms . variables- A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. Some programming languages provide types to represent data, which are referenced using variables. . | data types- integer, string, float, boolean, lists, dictionaries, arrays, etc. . | lists- Lists are used to store multiple items in a single variable. . | dictionaries- A dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value. . | . A plus sign indicates addition: a + b . A subtraction sign indicates subtraction: a - b . An asterisk/star indicates multiplication: a * b . A slash indicates division: a / b . MOD represent the Modulus operator. Returns the value after division: a MOD b . algorithms- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. . | sequence- a section of code is run only if a condition is met. (ex: if statements) . | selection- repeating steps or instructions over and over again (ex: loops) . | iteration- outline or set of steps that we do and follow in order that they are given . | strings- a sequence of characters . | concatenation- combines two or more strings into one . | length- len function finds the number of characters in a string . | substring- a part of a existing string . | upper- upper() method returns the uppercase string from the given string. It converts all lowercase characters to uppercase. . | lower- lower() method returns the lowercase string from the given string. It converts all uppercase characters to lowercase. . | comparison operators- Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. . | Truth tables- A truth table is a way of summarizing and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. . | if statement- will go through certain statements if the if expression is true . | if-else- will go through a statement no matter what, but the statement which is run depends on the if expression is true or false . | elif- elif is short for “else if” and is used when the first if statement isn’t true, but you want to check for another condition. Meaning, if statements pair up with elif and else statements to perform a series of checks. . | nested selection statements- Nested selection structures are used when more than one decision must be made before carrying out a task. Nesting is a programming activity, in which one program block is placed inside other program block of the same operation type. Nesting processes are mostly used implemented in the selection control structures. . | For Loop: repeats a function for a set number of times; I is the number of times repeated. With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc. . | While Loop: the while loop is used to repeat a section of code an unknown number of times until a specific condition is met. A while loop will execute a set of statements as long as a condition is true. . | return values: The value that a function returns to the caller is generally known as the function’s return value. All Python functions have a return value, either explicit or implicit. . | class- A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions. Like function definitions begin with the def keyword in Python, class definitions begin with a class keyword. . | parameters- Parameters are the variables that appear between the brackets in the “def” line of a Python function definition. . | procedural abstraction- One good use of a procedure is to eliminate duplicate code. In addition to improving the readability of the app, the use of a procedure will make it easier to modify that chunk of code because it only occurs once in the program. Use of parameters and complexity. . | .",
          "url": "https://haeryny.github.io/haehae/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://haeryny.github.io/haehae/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}