{
  
    
        "post0": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Describe Schema, here is resource Resource . What is a database schema? . A database schema defines how data is organized within a relational database . | What is the purpose of identity Column in SQL database? . Identity columns can be used for generating key values. The identity property on a column guarantees the following:Each new value is generated based on the current seed &amp; increment. . | What is the purpose of a primary key in SQL database?A primary key is the column or columns that contain values that uniquely identify each row in a table. A primary key is needed:To extract or archive data from a table that is visited more than once during a process . | What are the Data Types in SQL table?String, boolean, integer, float . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$WOTYUzh25UQ3KLyO$2261f088c6f40028429bceec524bdea26b1146eaa8213364ac5e44fbb14bc429&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$cBqqDPsIoAk80rOv$f5bd4c4a6c8317dad8273140a14638d44e4fe8d3201d8a7fce800a327af63874&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$zjCcOdS8mDSbVxVG$42130b9517c0424a1d65cd0a2608ee404f308a5c62d5d226294c2807a7cbc557&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$DQwoCCCv4qqyGUMS$009c668366039f21d8d05944c0020a5b417f4587172a96201593886adad67e1f&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$6t67LoVg2Qy2hLNT$edb03fa214deb5544181cfb29e930f02f5828eb370ba3bedd41ef1037d38b134&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$8WBsKfu4klCzJSWO$fd58a67ee1b8a2ed8b23d10835e1168a283b5c79354bbe28d6e002d98def670b&#39;, &#39;1921-10-21&#39;) (7, &#39;Haeryn Yu&#39;, &#39;haeryn&#39;, &#39;1234&#39;, &#39;2007-04-29&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record Bob Ross has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id haeryn the password has been successfully updated . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . The row with uid Bob Ross was successfully deleted . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . The row with uid bob was successfully deleted A new user record bob has been created The row with user id raven the password has been hacked (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$WOTYUzh25UQ3KLyO$2261f088c6f40028429bceec524bdea26b1146eaa8213364ac5e44fbb14bc429&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$cBqqDPsIoAk80rOv$f5bd4c4a6c8317dad8273140a14638d44e4fe8d3201d8a7fce800a327af63874&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$zjCcOdS8mDSbVxVG$42130b9517c0424a1d65cd0a2608ee404f308a5c62d5d226294c2807a7cbc557&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$DQwoCCCv4qqyGUMS$009c668366039f21d8d05944c0020a5b417f4587172a96201593886adad67e1f&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$6t67LoVg2Qy2hLNT$edb03fa214deb5544181cfb29e930f02f5828eb370ba3bedd41ef1037d38b134&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;gothackednewpassword123&#39;, &#39;1921-10-21&#39;) (7, &#39;Haeryn Yu&#39;, &#39;haeryn&#39;, &#39;1234&#39;, &#39;2007-04-29&#39;) (8, &#39;Bob Ross&#39;, &#39;bob&#39;, &#39;14444444444444&#39;, &#39;1946-10-29&#39;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . Object Orientation vs Imperative . Object-oriented programming (OOP) and imperative programming are both popular programming paradigms, each with its own advantages and disadvantages. Here are some key differences between the two: . Focus: Imperative programming focuses on how to achieve a specific task, while OOP focuses on the creation and manipulation of objects. . | Data Structures: In imperative programming, data structures are often simple arrays or structures, while in OOP, they are typically more complex objects with their own attributes and methods. . | Inheritance: In OOP, objects can inherit properties and methods from other objects, allowing for code reuse and increased modularity. In imperative programming, code is often duplicated or reused by copying and pasting. . | Overall, OOP is often seen as more organized, modular, and reusable than imperative programming. However, imperative programming can be more efficient for certain tasks, particularly those that involve a lot of low-level manipulation of data. Ultimately, the choice between the two will depend on the specific needs of the project and the preferences of the programmer. .",
            "url": "https://haeryny.github.io/haehae/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. | . Flask app object:&gt; It works for an api and used for making servers and websites. The flask object implements a WSGI application and acts as the central object. It is passed the name of the module or package of the application. Once it is created it will act as a central registry for the view functions, the URL rules, template configuration and much more. | SQLAlchemy db object: It is a library that facilitates the communication between Python programs and databases. Most of the times, this library is used as an Object Relational Mapper (ORM) tool that translates Python classes to tables on relational databases and automatically converts function calls to SQL statements. . | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User:Class user marks all the characterisitics of the class and what factors are included in that class. - db.Model inheritance: The db.model is inputed into the user class and we are able to use the functions in the user class. | init method: it sets up the attributes that you are able to use through out the class. For example, dob and uid. | @property, @&lt;column&gt;.setter: For each attribute you have the property and setter and it is getter and setter, which means aligned can read and update and create. | create, read, update, delete methods: These methods help keep the class remain updated so we are able to read, create, update, and delete. | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | You create the tables from the db Object by saying db.create_all(), which gets the attributes and creates a table. . User Object Constructors | The user object constructors prevent them from creating users that do not have all the features. . Try / Except | The try block lets you test a block of code for errors. The except block lets you handle the error. . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | If you write a Flask view function it’s often very handy to return a 404 error for missing entries. Because this is a very common idiom, Flask-SQLAlchemy provides a helper for this exact purpose. Instead of get() one can use get_or_404() and instead of first() first_or_404(). This will raise 404 errors instead of returning None. . user.password | For this purpose Flask-SQLAlchemy provides a query attribute on your Model class. When you access it you will get back a new query object over all records. You can then use methods like filter() to filter the records before you fire the select with all() or first(). If you want to go by primary key you can also use get(). . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() ... . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;Haeryn Yu&#39;, &#39;uid&#39;: &#39;haeryn&#39;, &#39;dob&#39;: &#39;04-29-2007&#39;, &#39;age&#39;: 15} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Haeryn Yu&#39;, &#39;uid&#39;: &#39;haeryn&#39;, &#39;dob&#39;: &#39;04-29-2007&#39;, &#39;age&#39;: 15}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self . # None def delete(): db.session.delete(self) db.session.commit() return None .",
            "url": "https://haeryny.github.io/haehae/week26/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/week26/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 372], &quot;duration&quot;: [50, 40, 45, 44] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 372 44 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 372 44 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7529411764705882 LogisticRegression Accuracy: 0.788235294117647 . /home/haeryny/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://haeryny.github.io/haehae/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Extracting Information From Data",
            "content": "AP PREP . The Extraction from Data . The ability to process data depends on the capabilities of the users and their tools. Data sets pose challenges regarless of size, such as: . the need to clean data | incomplete data | invalid data | the need to combine data sources | . Collecting Data . Issues to consider: Source Do you need more sources? | . | Tools to analyze Data | . | . Processing Data . It is affected by size Can one computer handle the task May need to use parallel processing | Use two or more processors to handle different parts of the task | . | . | . Potential Bias . Intentional: Who collected the data? | Do they have an agenda? | . | Unintentional: How is the data collected? | Who collected the data? | . | . Data Cleaning . Identifying incomplete, corrup, duplicate, or inaccurate records | Replacing, modifying, or deleting the &quot;dirty&quot; data | . Collegeboard Quiz . A researcher is analyzing data about students in a school district to determine whether there is a relationship between grade point average and number of absences. The researcher plans on compiling data from several sources to create a record for each student. | Answer: A A unique identifier would be required in order to distinguish between two students with the same first and last names. . A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? | Answer: B It will be a challenge to clean the data from the different counties to make the data uniform. The way pollution data is captured and organized may vary significantly from county to county. . A student is creating a Web site that is intended to display information about a city based on a city name that a user enters in a text field. Which of the following are likely to be challenges associated with processing city names that users might provide as input? | Answer: B and C Different users may abbreviate city names differently. This may require the student to clean the data to make it uniform before it can be processed. Misspelled city names will not be an exact match to information stored by the Web site. This may require the student to clean the data to make it uniform before it can be processed. . Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? | Answer: A The attendance for a particular show can be calculated dividing the total dollar amount of all tickets sold by the average ticket price. . A camera mounted on the dashboard of a car captures an image of the view from the driver’s seat every second. Each image is stored as data. Along with each image, the camera also captures and stores the car’s speed, the date and time, and the car’s GPS location as metadata. Which of the following can best be determined using only the data and none of the metadata? | Answer: D Determining the number of bicycles the car encountered would require the use of image recognition software to examine the images collected by the camera. The images are the data collected and no metadata would be required. . Which of the following questions about the students who responded to the survey can the teacher answer by analyzing the survey results? | Answer: C Question I can be answered because the teacher can detect a correlation between responses to questions 1 and 3 on the survey. Question II can be answered because the teacher can detect a correlation between responses to questions 1 and 2 on the survey. Question III cannot be answered because the survey is anonymous and the teacher cannot compare student grades with the responses to the survey questions. . JSON Dataset . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/iris.json&#39;) # print dataframe print(df) . sepalLength sepalWidth petalLength petalWidth species 0 5.1 3.5 1.4 0.2 setosa 1 4.9 3.0 1.4 0.2 setosa 2 4.7 3.2 1.3 0.2 setosa 3 4.6 3.1 1.5 0.2 setosa 4 5.0 3.6 1.4 0.2 setosa .. ... ... ... ... ... 145 6.7 3.0 5.2 2.3 virginica 146 6.3 2.5 5.0 1.9 virginica 147 6.5 3.0 5.2 2.0 virginica 148 6.2 3.4 5.4 2.3 virginica 149 5.9 3.0 5.1 1.8 virginica [150 rows x 5 columns] . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/iris.json&#39;) cols_to_print = [ &#39;sepalLength&#39;,&#39;sepalWidth&#39;, &#39;petalLength&#39;, &#39;petalWidth&#39;, &#39;species&#39;] df = df[cols_to_print] rows_to_print = [0,1,2,3,4,5, 6, 7, 8] df = df.iloc[rows_to_print] print(df) . sepalLength sepalWidth petalLength petalWidth species 0 5.1 3.5 1.4 0.2 setosa 1 4.9 3.0 1.4 0.2 setosa 2 4.7 3.2 1.3 0.2 setosa 3 4.6 3.1 1.5 0.2 setosa 4 5.0 3.6 1.4 0.2 setosa 5 5.4 3.9 1.7 0.4 setosa 6 4.6 3.4 1.4 0.3 setosa 7 5.0 3.4 1.5 0.2 setosa 8 4.4 2.9 1.4 0.2 setosa . print( &quot;--Max sepalLength-- n&quot;, df[df.sepalLength == df.sepalLength.max()]) print(&quot;&quot;) print( &quot;--Min sepalWidth-- n&quot;, df[df.sepalWidth == df.sepalWidth.min()]) print(&quot;&quot;) print( &quot;--Max petalLength-- n&quot;, df[df.petalLength == df.petalLength.max()]) print(&quot;&quot;) . --Max sepalLength-- sepalLength sepalWidth petalLength petalWidth species 5 5.4 3.9 1.7 0.4 setosa --Min sepalWidth-- sepalLength sepalWidth petalLength petalWidth species 8 4.4 2.9 1.4 0.2 setosa --Max petalLength-- sepalLength sepalWidth petalLength petalWidth species 5 5.4 3.9 1.7 0.4 setosa .",
            "url": "https://haeryny.github.io/haehae/2023/03/09/2.3-Extracting-Information-From-Data.html",
            "relUrl": "/2023/03/09/2.3-Extracting-Information-From-Data.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": ". Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . The commands that you have to use are cd and wget. . What are the command you use in Windows terminal to access files? | . The commands that you have to use are cd. . What are some of the major differences? | . They are the same. . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | . The path is very important because you need to know where the images are and how to access them. . How does the meta data source and label relate to Unit 5 topics? | . Master data objects are those core business objects used in the different applications across the organization, along with their associated metadata, attributes, definitions, roles, connections . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . The data is returned as a “DataFrame” which is a 2 dimensional spreadsheet-like data structure with columns of different types. pandas has two main data structures - DataFrame and Series. A Series is a one-dimensional array that can hold any value type - This is not necessarily the case but a DataFrame column may be treated as a Series. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;download.jpg&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images.- Text over your image . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | . Yes it does. It is in an orderly format and seems reasonable. . Describe Grey Scale algorithm in English or Pseudo code? | . It is in Psuedo code. . Describe scale image? What is before and after on pixels in three images? | . The scale is based on how much the size increases. The first one did not increase that much. The second one descreased and the third one increased. . Is scale image a type of compression? If so, line it up with College Board terms described? | . It is a type of compression where data is compressed that lines up with how data is extracted from code. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np ## IMPERATIVE CODING # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np ### OBJECT ORIENTENTED CODING class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://haeryny.github.io/haehae/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Compression Notes",
            "content": "AP PREP . Data Compression . Data compression can reduce the size of transmitted or stored data and the fewer the bits does not mean that there is less information. The amount of size reduction from compression depends on both the amount of redundancy in the original data representation and the compression algorithm applied. | . | . Lossless Data . Lossless data compression algorithms can usually reduce the number of bits stored or transmitted while guaranteeing complete recontrstuction of the original data. . In situations where quality or ability to reconstruct the original is maximally important, lossless is better | It reduces the number of bits stored or transmitted while guaranteeing complete reconstruction of the original data | . Lossy Data . Lossy data compression algorithms can significantly reduce the number of bits stored or transmitted but only allow reconstruction of an approximation of the original data . In situations where minimizing data size or transmission time is maximally important, lossy is better | It significantly reduces the number of bits stored or transmitted but only allow reconstruction of an approximation of the original data | . Collegeboard Quiz . Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? | Answer: B A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. . Explanation: Lossless compression algorithms are guaranteed to be able to reconstruct the original data, while lossy compression algorithms are not. . A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs? | Answer: A Compressing the file using a lossless compression algorithm before uploading it. . Explanation: Lossless compression algorithms allow for complete reconstruction of the original data and typically reduce the size of the data. . A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? | Answer: C Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. . Explanation: Although fewer bits may be stored, information is not necessarily lost when lossy compression is applied to an image. . Images . This is a jpeg image and this is good for lossy algorithm. The compression is applied to the actual pixel data. That data can&#39;t be magically reconstructed when the image is opened again. In other words, compression will permanently reduce the quality of a JPEG image. This is why JPEG compression is referred to as “lossy” compression. . . This is a png image and this is good for lossless algorithm because the image data can be compressed without losing any information. This is different from other compression formats, such as JPEG, which use a lossy compression algorithm that discards some of the image data to achieve a smaller file size. . Project Addition . I added pictures of the classes that dog owners can send their dogs for dog training, and I made a program that will make the image grey when the class is full. . When the class is empty . When the class is full . Programing Paradigm . import numpy as np from pathlib import Path from PIL import Image as pilImage def image_data(path=Path(&quot;images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Bob At Easel&quot;, &#39;file&#39;: &quot;Bob_at_Easel.jpg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images images = image_data() img = pilImage.open(images[0][&#39;filename&#39;]).convert(&#39;L&#39;) # Open the image and convert to grayscale # Get image dimensions width, height = img.size # Loop through each pixel for i in range(width): for j in range(height): # Get pixel value pixel_value = img.getpixel((i, j)) # Convert to binary and hexadecimal representation pixel_binary = bin(pixel_value) pixel_hex = hex(pixel_value) # Display the values print(f&quot;Pixel value at ({i}, {j}):&quot;) print(f&quot;Grayscale value: {pixel_value}&quot;) print(f&quot;Binary value: {pixel_binary}&quot;) print(f&quot;Hexadecimal value: {pixel_hex}&quot;) # since the image is large, there is a lot of outputs and does not work completely. . Pixel value at (0, 0): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 1): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 2): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 3): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 4): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 5): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 6): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 7): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 8): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (0, 9): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (0, 10): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 11): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 12): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 13): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 14): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 15): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 16): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 17): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 18): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 19): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 20): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 21): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (0, 22): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 23): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 24): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (0, 25): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 26): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 27): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 28): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 29): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 30): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 31): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 32): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 33): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 34): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 35): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 36): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 37): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 38): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 39): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 40): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 41): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 42): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 43): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 44): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 45): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 46): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 47): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 48): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 49): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 50): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 51): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 52): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 53): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 54): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 55): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 56): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 57): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 58): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 59): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 60): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 61): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 62): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 63): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 64): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (0, 65): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 66): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 67): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 68): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 69): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 70): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (0, 71): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 72): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 73): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 74): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 75): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 76): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 77): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 78): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 79): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 80): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 81): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (0, 82): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 83): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 84): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 85): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 86): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 87): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 88): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 89): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 90): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 91): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 92): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 93): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 94): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 95): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 96): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 97): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 98): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 99): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 100): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 101): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (0, 102): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 103): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 104): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 105): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 106): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 107): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 108): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 109): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 110): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 111): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 112): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (0, 113): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (0, 114): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 115): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (0, 116): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 117): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 118): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 119): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 120): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (0, 121): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 122): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 123): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 124): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 125): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 126): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (0, 127): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 128): Grayscale value: 206 Binary value: 0b11001110 Hexadecimal value: 0xce Pixel value at (0, 129): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (0, 130): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 131): Grayscale value: 206 Binary value: 0b11001110 Hexadecimal value: 0xce Pixel value at (0, 132): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (0, 133): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 134): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (0, 135): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (0, 136): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (0, 137): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (0, 138): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (0, 139): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (0, 140): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (0, 141): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (0, 142): Grayscale value: 206 Binary value: 0b11001110 Hexadecimal value: 0xce Pixel value at (0, 143): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (0, 144): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (0, 145): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (0, 146): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (0, 147): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (0, 148): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (0, 149): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (0, 150): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (0, 151): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (0, 152): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (0, 153): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (0, 154): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (0, 155): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (0, 156): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (0, 157): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (0, 158): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (0, 159): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (0, 160): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (0, 161): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (0, 162): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 163): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 164): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 165): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 166): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 167): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (0, 168): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 169): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 170): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 171): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 172): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (0, 173): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (0, 174): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (0, 175): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (0, 176): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (0, 177): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (0, 178): Grayscale value: 197 Binary value: 0b11000101 Hexadecimal value: 0xc5 Pixel value at (0, 179): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (0, 180): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (0, 181): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (0, 182): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (0, 183): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (0, 184): Grayscale value: 195 Binary value: 0b11000011 Hexadecimal value: 0xc3 Pixel value at (0, 185): Grayscale value: 195 Binary value: 0b11000011 Hexadecimal value: 0xc3 Pixel value at (0, 186): Grayscale value: 195 Binary value: 0b11000011 Hexadecimal value: 0xc3 Pixel value at (0, 187): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (0, 188): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (0, 189): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (0, 190): Grayscale value: 196 Binary value: 0b11000100 Hexadecimal value: 0xc4 Pixel value at (0, 191): Grayscale value: 197 Binary value: 0b11000101 Hexadecimal value: 0xc5 Pixel value at (0, 192): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (0, 193): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (0, 194): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (0, 195): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (0, 196): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (0, 197): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (0, 198): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 199): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 200): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (0, 201): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (0, 202): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (0, 203): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 204): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 205): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (0, 206): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (0, 207): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (0, 208): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (0, 209): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (0, 210): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (0, 211): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (0, 212): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (0, 213): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 214): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 215): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 216): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (0, 217): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (0, 218): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (0, 219): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (0, 220): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (0, 221): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (0, 222): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (0, 223): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (0, 224): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (0, 225): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (0, 226): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (0, 227): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (0, 228): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (0, 229): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (0, 230): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (0, 231): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (0, 232): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (0, 233): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (0, 234): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 235): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (0, 236): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (0, 237): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (0, 238): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (0, 239): Grayscale value: 182 Binary value: 0b10110110 Hexadecimal value: 0xb6 Pixel value at (0, 240): Grayscale value: 183 Binary value: 0b10110111 Hexadecimal value: 0xb7 Pixel value at (0, 241): Grayscale value: 183 Binary value: 0b10110111 Hexadecimal value: 0xb7 Pixel value at (0, 242): Grayscale value: 183 Binary value: 0b10110111 Hexadecimal value: 0xb7 Pixel value at (0, 243): Grayscale value: 183 Binary value: 0b10110111 Hexadecimal value: 0xb7 Pixel value at (0, 244): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (0, 245): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (0, 246): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (0, 247): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (0, 248): Grayscale value: 181 Binary value: 0b10110101 Hexadecimal value: 0xb5 Pixel value at (0, 249): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 250): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (0, 251): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (0, 252): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (0, 253): Grayscale value: 197 Binary value: 0b11000101 Hexadecimal value: 0xc5 Pixel value at (0, 254): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (0, 255): Grayscale value: 38 Binary value: 0b100110 Hexadecimal value: 0x26 Pixel value at (0, 256): Grayscale value: 87 Binary value: 0b1010111 Hexadecimal value: 0x57 Pixel value at (0, 257): Grayscale value: 92 Binary value: 0b1011100 Hexadecimal value: 0x5c Pixel value at (0, 258): Grayscale value: 89 Binary value: 0b1011001 Hexadecimal value: 0x59 Pixel value at (0, 259): Grayscale value: 60 Binary value: 0b111100 Hexadecimal value: 0x3c Pixel value at (0, 260): Grayscale value: 89 Binary value: 0b1011001 Hexadecimal value: 0x59 Pixel value at (0, 261): Grayscale value: 97 Binary value: 0b1100001 Hexadecimal value: 0x61 Pixel value at (0, 262): Grayscale value: 63 Binary value: 0b111111 Hexadecimal value: 0x3f Pixel value at (0, 263): Grayscale value: 85 Binary value: 0b1010101 Hexadecimal value: 0x55 Pixel value at (0, 264): Grayscale value: 80 Binary value: 0b1010000 Hexadecimal value: 0x50 Pixel value at (0, 265): Grayscale value: 111 Binary value: 0b1101111 Hexadecimal value: 0x6f Pixel value at (0, 266): Grayscale value: 21 Binary value: 0b10101 Hexadecimal value: 0x15 Pixel value at (0, 267): Grayscale value: 10 Binary value: 0b1010 Hexadecimal value: 0xa Pixel value at (0, 268): Grayscale value: 73 Binary value: 0b1001001 Hexadecimal value: 0x49 Pixel value at (0, 269): Grayscale value: 50 Binary value: 0b110010 Hexadecimal value: 0x32 Pixel value at (0, 270): Grayscale value: 35 Binary value: 0b100011 Hexadecimal value: 0x23 Pixel value at (0, 271): Grayscale value: 5 Binary value: 0b101 Hexadecimal value: 0x5 Pixel value at (0, 272): Grayscale value: 80 Binary value: 0b1010000 Hexadecimal value: 0x50 Pixel value at (0, 273): Grayscale value: 135 Binary value: 0b10000111 Hexadecimal value: 0x87 Pixel value at (0, 274): Grayscale value: 109 Binary value: 0b1101101 Hexadecimal value: 0x6d Pixel value at (0, 275): Grayscale value: 120 Binary value: 0b1111000 Hexadecimal value: 0x78 Pixel value at (0, 276): Grayscale value: 128 Binary value: 0b10000000 Hexadecimal value: 0x80 Pixel value at (0, 277): Grayscale value: 137 Binary value: 0b10001001 Hexadecimal value: 0x89 Pixel value at (0, 278): Grayscale value: 48 Binary value: 0b110000 Hexadecimal value: 0x30 Pixel value at (0, 279): Grayscale value: 45 Binary value: 0b101101 Hexadecimal value: 0x2d Pixel value at (0, 280): Grayscale value: 50 Binary value: 0b110010 Hexadecimal value: 0x32 Pixel value at (0, 281): Grayscale value: 45 Binary value: 0b101101 Hexadecimal value: 0x2d Pixel value at (0, 282): Grayscale value: 78 Binary value: 0b1001110 Hexadecimal value: 0x4e Pixel value at (1, 0): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 1): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 2): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 3): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 4): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 5): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 6): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 7): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 8): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 9): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 10): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 11): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 12): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 13): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 14): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 15): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 16): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 17): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 18): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 19): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 20): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 21): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 22): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 23): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 24): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 25): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 26): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 27): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 28): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 29): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 30): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 31): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 32): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 33): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 34): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 35): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 36): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 37): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 38): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 39): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 40): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 41): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 42): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 43): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 44): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 45): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 46): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 47): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (1, 48): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 49): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 50): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 51): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 52): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 53): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 54): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 55): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 56): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 57): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 58): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 59): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 60): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 61): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 62): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 63): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 64): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 65): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 66): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 67): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 68): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 69): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (1, 70): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (1, 71): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (1, 72): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (1, 73): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 74): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 75): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 76): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 77): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 78): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 79): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 80): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 81): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 82): Grayscale value: 222 Binary value: 0b11011110 Hexadecimal value: 0xde Pixel value at (1, 83): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 84): Grayscale value: 224 Binary value: 0b11100000 Hexadecimal value: 0xe0 Pixel value at (1, 85): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 86): Grayscale value: 220 Binary value: 0b11011100 Hexadecimal value: 0xdc Pixel value at (1, 87): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 88): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 89): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 90): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 91): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (1, 92): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 93): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 94): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 95): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (1, 96): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 97): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (1, 98): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (1, 99): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (1, 100): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 101): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 102): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 103): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 104): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 105): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 106): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 107): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 108): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 109): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 110): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 111): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (1, 112): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (1, 113): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 114): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 115): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 116): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 117): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 118): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 119): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 120): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 121): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 122): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 123): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 124): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 125): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 126): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 127): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (1, 128): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 129): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (1, 130): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 131): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (1, 132): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (1, 133): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 134): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (1, 135): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (1, 136): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (1, 137): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (1, 138): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (1, 139): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (1, 140): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (1, 141): Grayscale value: 206 Binary value: 0b11001110 Hexadecimal value: 0xce Pixel value at (1, 142): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (1, 143): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (1, 144): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (1, 145): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (1, 146): Grayscale value: 205 Binary value: 0b11001101 Hexadecimal value: 0xcd Pixel value at (1, 147): Grayscale value: 206 Binary value: 0b11001110 Hexadecimal value: 0xce Pixel value at (1, 148): Grayscale value: 206 Binary value: 0b11001110 Hexadecimal value: 0xce Pixel value at (1, 149): Grayscale value: 205 Binary value: 0b11001101 Hexadecimal value: 0xcd Pixel value at (1, 150): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (1, 151): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (1, 152): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (1, 153): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (1, 154): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (1, 155): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (1, 156): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (1, 157): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (1, 158): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (1, 159): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (1, 160): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (1, 161): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (1, 162): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (1, 163): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (1, 164): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (1, 165): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (1, 166): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (1, 167): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (1, 168): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (1, 169): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (1, 170): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (1, 171): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (1, 172): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (1, 173): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (1, 174): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (1, 175): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (1, 176): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (1, 177): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (1, 178): Grayscale value: 197 Binary value: 0b11000101 Hexadecimal value: 0xc5 Pixel value at (1, 179): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (1, 180): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (1, 181): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (1, 182): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (1, 183): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (1, 184): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (1, 185): Grayscale value: 195 Binary value: 0b11000011 Hexadecimal value: 0xc3 Pixel value at (1, 186): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (1, 187): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (1, 188): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (1, 189): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (1, 190): Grayscale value: 196 Binary value: 0b11000100 Hexadecimal value: 0xc4 Pixel value at (1, 191): Grayscale value: 197 Binary value: 0b11000101 Hexadecimal value: 0xc5 Pixel value at (1, 192): Grayscale value: 195 Binary value: 0b11000011 Hexadecimal value: 0xc3 Pixel value at (1, 193): Grayscale value: 195 Binary value: 0b11000011 Hexadecimal value: 0xc3 Pixel value at (1, 194): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (1, 195): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (1, 196): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (1, 197): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (1, 198): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 199): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 200): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (1, 201): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (1, 202): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (1, 203): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 204): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 205): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 206): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 207): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (1, 208): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (1, 209): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (1, 210): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (1, 211): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 212): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 213): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 214): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (1, 215): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (1, 216): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (1, 217): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (1, 218): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (1, 219): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (1, 220): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (1, 221): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (1, 222): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (1, 223): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (1, 224): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (1, 225): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (1, 226): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (1, 227): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (1, 228): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (1, 229): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (1, 230): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (1, 231): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (1, 232): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (1, 233): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (1, 234): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (1, 235): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (1, 236): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (1, 237): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (1, 238): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (1, 239): Grayscale value: 182 Binary value: 0b10110110 Hexadecimal value: 0xb6 Pixel value at (1, 240): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (1, 241): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (1, 242): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (1, 243): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (1, 244): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (1, 245): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (1, 246): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (1, 247): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (1, 248): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (1, 249): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (1, 250): Grayscale value: 181 Binary value: 0b10110101 Hexadecimal value: 0xb5 Pixel value at (1, 251): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (1, 252): Grayscale value: 183 Binary value: 0b10110111 Hexadecimal value: 0xb7 Pixel value at (1, 253): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (1, 254): Grayscale value: 225 Binary value: 0b11100001 Hexadecimal value: 0xe1 Pixel value at (1, 255): Grayscale value: 88 Binary value: 0b1011000 Hexadecimal value: 0x58 Pixel value at (1, 256): Grayscale value: 55 Binary value: 0b110111 Hexadecimal value: 0x37 Pixel value at (1, 257): Grayscale value: 58 Binary value: 0b111010 Hexadecimal value: 0x3a Pixel value at (1, 258): Grayscale value: 70 Binary value: 0b1000110 Hexadecimal value: 0x46 Pixel value at (1, 259): Grayscale value: 73 Binary value: 0b1001001 Hexadecimal value: 0x49 Pixel value at (1, 260): Grayscale value: 84 Binary value: 0b1010100 Hexadecimal value: 0x54 Pixel value at (1, 261): Grayscale value: 117 Binary value: 0b1110101 Hexadecimal value: 0x75 Pixel value at (1, 262): Grayscale value: 70 Binary value: 0b1000110 Hexadecimal value: 0x46 Pixel value at (1, 263): Grayscale value: 92 Binary value: 0b1011100 Hexadecimal value: 0x5c Pixel value at (1, 264): Grayscale value: 89 Binary value: 0b1011001 Hexadecimal value: 0x59 Pixel value at (1, 265): Grayscale value: 94 Binary value: 0b1011110 Hexadecimal value: 0x5e Pixel value at (1, 266): Grayscale value: 1 Binary value: 0b1 Hexadecimal value: 0x1 Pixel value at (1, 267): Grayscale value: 16 Binary value: 0b10000 Hexadecimal value: 0x10 Pixel value at (1, 268): Grayscale value: 72 Binary value: 0b1001000 Hexadecimal value: 0x48 Pixel value at (1, 269): Grayscale value: 45 Binary value: 0b101101 Hexadecimal value: 0x2d Pixel value at (1, 270): Grayscale value: 4 Binary value: 0b100 Hexadecimal value: 0x4 Pixel value at (1, 271): Grayscale value: 3 Binary value: 0b11 Hexadecimal value: 0x3 Pixel value at (1, 272): Grayscale value: 101 Binary value: 0b1100101 Hexadecimal value: 0x65 Pixel value at (1, 273): Grayscale value: 128 Binary value: 0b10000000 Hexadecimal value: 0x80 Pixel value at (1, 274): Grayscale value: 125 Binary value: 0b1111101 Hexadecimal value: 0x7d Pixel value at (1, 275): Grayscale value: 119 Binary value: 0b1110111 Hexadecimal value: 0x77 Pixel value at (1, 276): Grayscale value: 146 Binary value: 0b10010010 Hexadecimal value: 0x92 Pixel value at (1, 277): Grayscale value: 135 Binary value: 0b10000111 Hexadecimal value: 0x87 Pixel value at (1, 278): Grayscale value: 37 Binary value: 0b100101 Hexadecimal value: 0x25 Pixel value at (1, 279): Grayscale value: 29 Binary value: 0b11101 Hexadecimal value: 0x1d Pixel value at (1, 280): Grayscale value: 38 Binary value: 0b100110 Hexadecimal value: 0x26 Pixel value at (1, 281): Grayscale value: 33 Binary value: 0b100001 Hexadecimal value: 0x21 Pixel value at (1, 282): Grayscale value: 67 Binary value: 0b1000011 Hexadecimal value: 0x43 Pixel value at (2, 0): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 1): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 2): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 3): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 4): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 5): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 6): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 7): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 8): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 9): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 10): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 11): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 12): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 13): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 14): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 15): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 16): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 17): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 18): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 19): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 20): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 21): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 22): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 23): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 24): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 25): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 26): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 27): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 28): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 29): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 30): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 31): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 32): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 33): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 34): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 35): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 36): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 37): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 38): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 39): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 40): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 41): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 42): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 43): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 44): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 45): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 46): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 47): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 48): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 49): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 50): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 51): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 52): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 53): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 54): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 55): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 56): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 57): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 58): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 59): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 60): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (2, 61): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 62): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 63): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 64): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (2, 65): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 66): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (2, 67): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 68): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (2, 69): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 70): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (2, 71): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 72): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 73): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 74): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 75): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 76): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 77): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 78): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 79): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (2, 80): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 81): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 82): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 83): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (2, 84): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 85): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (2, 86): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 87): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 88): Grayscale value: 220 Binary value: 0b11011100 Hexadecimal value: 0xdc Pixel value at (2, 89): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 90): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 91): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 92): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 93): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 94): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (2, 95): Grayscale value: 220 Binary value: 0b11011100 Hexadecimal value: 0xdc Pixel value at (2, 96): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 97): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (2, 98): Grayscale value: 220 Binary value: 0b11011100 Hexadecimal value: 0xdc Pixel value at (2, 99): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (2, 100): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 101): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (2, 102): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (2, 103): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 104): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 105): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 106): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 107): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 108): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 109): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 110): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 111): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (2, 112): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 113): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (2, 114): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 115): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 116): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (2, 117): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 118): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 119): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 120): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 121): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 122): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (2, 123): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 124): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 125): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (2, 126): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 127): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (2, 128): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (2, 129): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 130): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 131): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (2, 132): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (2, 133): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 134): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (2, 135): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (2, 136): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (2, 137): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (2, 138): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (2, 139): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (2, 140): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (2, 141): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (2, 142): Grayscale value: 205 Binary value: 0b11001101 Hexadecimal value: 0xcd Pixel value at (2, 143): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (2, 144): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (2, 145): Grayscale value: 205 Binary value: 0b11001101 Hexadecimal value: 0xcd Pixel value at (2, 146): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (2, 147): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (2, 148): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (2, 149): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (2, 150): Grayscale value: 205 Binary value: 0b11001101 Hexadecimal value: 0xcd Pixel value at (2, 151): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (2, 152): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (2, 153): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (2, 154): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (2, 155): Grayscale value: 204 Binary value: 0b11001100 Hexadecimal value: 0xcc Pixel value at (2, 156): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (2, 157): Grayscale value: 203 Binary value: 0b11001011 Hexadecimal value: 0xcb Pixel value at (2, 158): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (2, 159): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (2, 160): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (2, 161): Grayscale value: 202 Binary value: 0b11001010 Hexadecimal value: 0xca Pixel value at (2, 162): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 163): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 164): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (2, 165): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 166): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 167): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 168): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 169): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 170): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 171): Grayscale value: 201 Binary value: 0b11001001 Hexadecimal value: 0xc9 Pixel value at (2, 172): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (2, 173): Grayscale value: 200 Binary value: 0b11001000 Hexadecimal value: 0xc8 Pixel value at (2, 174): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (2, 175): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (2, 176): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (2, 177): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (2, 178): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (2, 179): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (2, 180): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (2, 181): Grayscale value: 199 Binary value: 0b11000111 Hexadecimal value: 0xc7 Pixel value at (2, 182): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (2, 183): Grayscale value: 198 Binary value: 0b11000110 Hexadecimal value: 0xc6 Pixel value at (2, 184): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (2, 185): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (2, 186): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (2, 187): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (2, 188): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (2, 189): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (2, 190): Grayscale value: 196 Binary value: 0b11000100 Hexadecimal value: 0xc4 Pixel value at (2, 191): Grayscale value: 197 Binary value: 0b11000101 Hexadecimal value: 0xc5 Pixel value at (2, 192): Grayscale value: 196 Binary value: 0b11000100 Hexadecimal value: 0xc4 Pixel value at (2, 193): Grayscale value: 196 Binary value: 0b11000100 Hexadecimal value: 0xc4 Pixel value at (2, 194): Grayscale value: 195 Binary value: 0b11000011 Hexadecimal value: 0xc3 Pixel value at (2, 195): Grayscale value: 195 Binary value: 0b11000011 Hexadecimal value: 0xc3 Pixel value at (2, 196): Grayscale value: 194 Binary value: 0b11000010 Hexadecimal value: 0xc2 Pixel value at (2, 197): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (2, 198): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (2, 199): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 200): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 201): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 202): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 203): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 204): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 205): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 206): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 207): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 208): Grayscale value: 193 Binary value: 0b11000001 Hexadecimal value: 0xc1 Pixel value at (2, 209): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 210): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 211): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 212): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (2, 213): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (2, 214): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (2, 215): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (2, 216): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (2, 217): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (2, 218): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (2, 219): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (2, 220): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (2, 221): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (2, 222): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (2, 223): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (2, 224): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (2, 225): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (2, 226): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (2, 227): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (2, 228): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (2, 229): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (2, 230): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (2, 231): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (2, 232): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (2, 233): Grayscale value: 191 Binary value: 0b10111111 Hexadecimal value: 0xbf Pixel value at (2, 234): Grayscale value: 192 Binary value: 0b11000000 Hexadecimal value: 0xc0 Pixel value at (2, 235): Grayscale value: 190 Binary value: 0b10111110 Hexadecimal value: 0xbe Pixel value at (2, 236): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (2, 237): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (2, 238): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (2, 239): Grayscale value: 184 Binary value: 0b10111000 Hexadecimal value: 0xb8 Pixel value at (2, 240): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (2, 241): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (2, 242): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (2, 243): Grayscale value: 185 Binary value: 0b10111001 Hexadecimal value: 0xb9 Pixel value at (2, 244): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (2, 245): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (2, 246): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (2, 247): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (2, 248): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (2, 249): Grayscale value: 186 Binary value: 0b10111010 Hexadecimal value: 0xba Pixel value at (2, 250): Grayscale value: 188 Binary value: 0b10111100 Hexadecimal value: 0xbc Pixel value at (2, 251): Grayscale value: 187 Binary value: 0b10111011 Hexadecimal value: 0xbb Pixel value at (2, 252): Grayscale value: 189 Binary value: 0b10111101 Hexadecimal value: 0xbd Pixel value at (2, 253): Grayscale value: 179 Binary value: 0b10110011 Hexadecimal value: 0xb3 Pixel value at (2, 254): Grayscale value: 236 Binary value: 0b11101100 Hexadecimal value: 0xec Pixel value at (2, 255): Grayscale value: 115 Binary value: 0b1110011 Hexadecimal value: 0x73 Pixel value at (2, 256): Grayscale value: 50 Binary value: 0b110010 Hexadecimal value: 0x32 Pixel value at (2, 257): Grayscale value: 97 Binary value: 0b1100001 Hexadecimal value: 0x61 Pixel value at (2, 258): Grayscale value: 65 Binary value: 0b1000001 Hexadecimal value: 0x41 Pixel value at (2, 259): Grayscale value: 90 Binary value: 0b1011010 Hexadecimal value: 0x5a Pixel value at (2, 260): Grayscale value: 61 Binary value: 0b111101 Hexadecimal value: 0x3d Pixel value at (2, 261): Grayscale value: 104 Binary value: 0b1101000 Hexadecimal value: 0x68 Pixel value at (2, 262): Grayscale value: 98 Binary value: 0b1100010 Hexadecimal value: 0x62 Pixel value at (2, 263): Grayscale value: 50 Binary value: 0b110010 Hexadecimal value: 0x32 Pixel value at (2, 264): Grayscale value: 92 Binary value: 0b1011100 Hexadecimal value: 0x5c Pixel value at (2, 265): Grayscale value: 72 Binary value: 0b1001000 Hexadecimal value: 0x48 Pixel value at (2, 266): Grayscale value: 2 Binary value: 0b10 Hexadecimal value: 0x2 Pixel value at (2, 267): Grayscale value: 32 Binary value: 0b100000 Hexadecimal value: 0x20 Pixel value at (2, 268): Grayscale value: 77 Binary value: 0b1001101 Hexadecimal value: 0x4d Pixel value at (2, 269): Grayscale value: 36 Binary value: 0b100100 Hexadecimal value: 0x24 Pixel value at (2, 270): Grayscale value: 2 Binary value: 0b10 Hexadecimal value: 0x2 Pixel value at (2, 271): Grayscale value: 41 Binary value: 0b101001 Hexadecimal value: 0x29 Pixel value at (2, 272): Grayscale value: 132 Binary value: 0b10000100 Hexadecimal value: 0x84 Pixel value at (2, 273): Grayscale value: 118 Binary value: 0b1110110 Hexadecimal value: 0x76 Pixel value at (2, 274): Grayscale value: 140 Binary value: 0b10001100 Hexadecimal value: 0x8c Pixel value at (2, 275): Grayscale value: 112 Binary value: 0b1110000 Hexadecimal value: 0x70 Pixel value at (2, 276): Grayscale value: 156 Binary value: 0b10011100 Hexadecimal value: 0x9c Pixel value at (2, 277): Grayscale value: 138 Binary value: 0b10001010 Hexadecimal value: 0x8a Pixel value at (2, 278): Grayscale value: 37 Binary value: 0b100101 Hexadecimal value: 0x25 Pixel value at (2, 279): Grayscale value: 23 Binary value: 0b10111 Hexadecimal value: 0x17 Pixel value at (2, 280): Grayscale value: 39 Binary value: 0b100111 Hexadecimal value: 0x27 Pixel value at (2, 281): Grayscale value: 34 Binary value: 0b100010 Hexadecimal value: 0x22 Pixel value at (2, 282): Grayscale value: 68 Binary value: 0b1000100 Hexadecimal value: 0x44 Pixel value at (3, 0): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 1): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 2): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 3): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 4): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 5): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 6): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (3, 7): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (3, 8): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 9): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 10): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 11): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 12): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 13): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 14): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 15): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 16): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 17): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 18): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 19): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 20): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 21): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 22): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 23): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 24): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 25): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 26): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 27): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 28): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 29): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 30): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 31): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 32): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 33): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 34): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 35): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 36): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 37): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 38): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 39): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 40): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 41): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 42): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 43): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 44): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 45): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 46): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 47): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 48): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 49): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 50): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 51): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 52): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 53): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 54): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 55): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 56): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 57): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 58): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 59): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (3, 60): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (3, 61): Grayscale value: 220 Binary value: 0b11011100 Hexadecimal value: 0xdc Pixel value at (3, 62): Grayscale value: 220 Binary value: 0b11011100 Hexadecimal value: 0xdc Pixel value at (3, 63): Grayscale value: 220 Binary value: 0b11011100 Hexadecimal value: 0xdc Pixel value at (3, 64): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (3, 65): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 66): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 67): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (3, 68): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 69): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 70): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (3, 71): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 72): Grayscale value: 221 Binary value: 0b11011101 Hexadecimal value: 0xdd Pixel value at (3, 73): Grayscale value: 220 Binary value: 0b11011100 Hexadecimal value: 0xdc Pixel value at (3, 74): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 75): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 76): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 77): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 78): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (3, 79): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (3, 80): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (3, 81): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 82): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 83): Grayscale value: 225 Binary value: 0b11100001 Hexadecimal value: 0xe1 Pixel value at (3, 84): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (3, 85): Grayscale value: 221 Binary value: 0b11011101 Hexadecimal value: 0xdd Pixel value at (3, 86): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (3, 87): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (3, 88): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (3, 89): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 90): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 91): Grayscale value: 221 Binary value: 0b11011101 Hexadecimal value: 0xdd Pixel value at (3, 92): Grayscale value: 221 Binary value: 0b11011101 Hexadecimal value: 0xdd Pixel value at (3, 93): Grayscale value: 222 Binary value: 0b11011110 Hexadecimal value: 0xde Pixel value at (3, 94): Grayscale value: 219 Binary value: 0b11011011 Hexadecimal value: 0xdb Pixel value at (3, 95): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (3, 96): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 97): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 98): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 99): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 100): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 101): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 102): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 103): Grayscale value: 216 Binary value: 0b11011000 Hexadecimal value: 0xd8 Pixel value at (3, 104): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 105): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 106): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 107): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 108): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 109): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 110): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 111): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 112): Grayscale value: 218 Binary value: 0b11011010 Hexadecimal value: 0xda Pixel value at (3, 113): Grayscale value: 221 Binary value: 0b11011101 Hexadecimal value: 0xdd Pixel value at (3, 114): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (3, 115): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 116): Grayscale value: 217 Binary value: 0b11011001 Hexadecimal value: 0xd9 Pixel value at (3, 117): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 118): Grayscale value: 210 Binary value: 0b11010010 Hexadecimal value: 0xd2 Pixel value at (3, 119): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 120): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 121): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 122): Grayscale value: 215 Binary value: 0b11010111 Hexadecimal value: 0xd7 Pixel value at (3, 123): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 124): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 125): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 126): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 127): Grayscale value: 211 Binary value: 0b11010011 Hexadecimal value: 0xd3 Pixel value at (3, 128): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (3, 129): Grayscale value: 213 Binary value: 0b11010101 Hexadecimal value: 0xd5 Pixel value at (3, 130): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (3, 131): Grayscale value: 207 Binary value: 0b11001111 Hexadecimal value: 0xcf Pixel value at (3, 132): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 133): Grayscale value: 214 Binary value: 0b11010110 Hexadecimal value: 0xd6 Pixel value at (3, 134): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (3, 135): Grayscale value: 212 Binary value: 0b11010100 Hexadecimal value: 0xd4 Pixel value at (3, 136): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (3, 137): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (3, 138): Grayscale value: 208 Binary value: 0b11010000 Hexadecimal value: 0xd0 Pixel value at (3, 139): Grayscale value: 209 Binary value: 0b11010001 Hexadecimal value: 0xd1 Pixel value at (3, 140): Grayscale value: 209 . KeyboardInterrupt Traceback (most recent call last) /home/haeryny/haehae/_notebooks/2023-03-07-2.2-Data-Compression-Notes.ipynb Cell 5 in &lt;cell line: 21&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haeryny/haehae/_notebooks/2023-03-07-2.2-Data-Compression-Notes.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; # Display the values &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haeryny/haehae/_notebooks/2023-03-07-2.2-Data-Compression-Notes.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; print(f&#34;Pixel value at ({i}, {j}):&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haeryny/haehae/_notebooks/2023-03-07-2.2-Data-Compression-Notes.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=31&#39;&gt;32&lt;/a&gt; print(f&#34;Grayscale value: {pixel_value}&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haeryny/haehae/_notebooks/2023-03-07-2.2-Data-Compression-Notes.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=32&#39;&gt;33&lt;/a&gt; print(f&#34;Binary value: {pixel_binary}&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haeryny/haehae/_notebooks/2023-03-07-2.2-Data-Compression-Notes.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=33&#39;&gt;34&lt;/a&gt; print(f&#34;Hexadecimal value: {pixel_hex}&#34;) File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:531, in OutStream.write(self, string) 529 is_child = (not self._is_master_process()) 530 # only touch the buffer in the IO thread to avoid races --&gt; 531 self.pub_thread.schedule(lambda: self._buffer.write(string)) 532 if is_child: 533 # mp.Pool cannot be trusted to flush promptly (or ever), 534 # and this helps. 535 if self._subprocess_flush_pending: File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:216, in IOPubThread.schedule(self, f) 214 self._events.append(f) 215 # wake event thread (message content is ignored) --&gt; 216 self._event_pipe.send(b&#39;&#39;) 217 else: 218 f() File ~/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py:547, in Socket.send(self, data, flags, copy, track, routing_id, group) 540 data = zmq.Frame( 541 data, 542 track=track, 543 copy=copy or None, 544 copy_threshold=self.copy_threshold, 545 ) 546 data.group = group --&gt; 547 return super(Socket, self).send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:718, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:765, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:242, in zmq.backend.cython.socket._send_copy() File ~/anaconda3/lib/python3.9/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: .",
            "url": "https://haeryny.github.io/haehae/2023/03/07/2.2-Data-Compression-Notes.html",
            "relUrl": "/2023/03/07/2.2-Data-Compression-Notes.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "MC 3",
            "content": ". Question 2 . Which of the following has the greatest potential for compromising a user’s personal privacy? . Wrong Answer: B . The IP address of a user’s computer is required for the user to send and receive information on the Internet. The IP address in itself does not contain any extra information about the user. | . Right Answer: A . The aggregation of information in browser cookies can be used by websites that the user visits to track the user and collect information about the user. | . Question 10 . Which of the following activities poses the greatest personal cybersecurity risk? . Wrong Answer: A . Public key encryption is widely used because of the functionality it provides in addressing cybersecurity issues when sending information across the Internet. | . Right Answer: C . As an email message passes through the Internet, it goes through intermediate computers and routers. These computers and routers could read the contents of the email. The credit card number could be read from the email. | . Question 12 . Which of the following is LEAST likely to indicate a phishing attack? . Wrong Answer: B . Emails that request the user to click on an unknown link, as well as requests to share password information, are indicative of a phishing attack. | . Right Answer: A . Phishing attacks are characterized by a communication from a person trying to trick another person into divulging personal information. Because the phone number on a bank card is public information and not personal, this request does not indicate a phishing attack. | . Question 29 . Consider the following code segment. The figure presents eight blocks of code that consist of 8 total lines. Line 1: [begin block] a ← true [end block] Line 2: [begin block] b ← false [end block] Line 3: [begin block] c ← true [end block] Line 4: [begin block] a ← [begin block] NOT [begin block] a OR b [end block] [end block] AND c [end block] Line 5: [begin block] c ← c AND a [end block] Line 6: [begin block] DISPLAY [begin block] a [end block] [end block] Line 7: [begin block] DISPLAY [begin block] b [end block] [end block] Line 8: [begin block] DISPLAY [begin block] c [end block] [end block] What is displayed as a result of executing the code segment? . Wrong Answer: C . The fourth statement assigns the value false to a. The fifth statement assigns the value false to c. | . Right Answer: B . The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. | . Question 35 . Three teams (Team A, Team B, and Team C) are participating in a trivia contest. Let scoreA represent the number of correct questions for Team A, scoreB represent the number of correct questions for Team B, and scoreC represent the number of correct questions for Team C. Assuming no two teams get the same number of correct questions, which of the following code segments correctly displays the team with the highest number of correct questions? . Wrong Answer: D . For example, when scoreB &gt; scoreC &gt; scoreA, the code segment incorrectly identifies Team C as the winner instead of Team B. | . Right Answer: A . If scoreA is greater than both scoreB and scoreC (the first two IF clauses), then Team A wins. If scoreA is greater than scoreB but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. If scoreB is greater than scoreA (the outer ELSE clause) and scoreC (the IF clause in the outer ELSE), then Team B wins. If scoreB is greater than scoreA but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. | . Question 38 . Consider the following code segment with an integer variable num. . IF(num &gt; 0) . { . DISPLAY(“positive”) . } . IF(num &lt; 0) . { . DISPLAY(“negative”) . } . IF(num = 0) . { . DISPLAY(“zero”) . } . Which of the following code segments is equivalent to the code segment above? . Wrong Answer: A . The given code segment displays “positive” when num is positive, displays “negative” when num is negative, and displays “zero” when num is 0. This code segment does not produce the same result for all values of num. For example, “positive zero” is displayed when num is 0. | . Right Answer: B . The given code segment displays “positive” when num is positive, displays “negative” when num is negative, and displays “zero” when num is 0. This code segment produces the same result. When num is negative, “negative” is displayed. Otherwise, when num is 0, “zero” is displayed. Otherwise, “positive” is displayed. | . Question 39 . The following question uses a robot in a grid of squares. The robot is represented as a triangle, which is initially facing toward the top of the grid. . The figure presents a robot in a 5 by 5 grid of squares. The robot is represented by a triangle, which is initially located in the second square from the left in the fourth row, facing upward. The following code segment moves the robot around the grid. Assume that n is a positive integer. . Line 1: count ← 0 . Line 2: REPEAT n TIMES . Line 3: { . Line 4: REPEAT 2 TIMES . Line 5: { . Line 6: MOVE_FORWARD() . Line 7: } . Line 8: ROTATE_RIGHT() . Line 9: } . Consider the goal of modifying the code segment to count the number of squares the robot visits before execution terminates. Which of the following modifications can be made to the code segment to correctly count the number of squares the robot moves to? . Wrong Answer: C . Inserting this statement between lines 6 and 7 increases the value of count once for each iteration of the outer loop, which results in count being half as large as it should be. | . Right Answer: A . Inserting this statement between lines 6 and 7 increases the value of count once each time the robot moves forward, which keeps an accurate count of the number of squares the robot visits. | . Question 49 . A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . Wrong Answer: D . In order to validate the predicted results of a simulation, observed data may be needed for comparison purposes. However, running a simulation does not require observations before it can be used. | . Right Answer: B . Simulations are limited by the model that is used. There may be many reasons for using a simplified model, including ease of implementation. | .",
            "url": "https://haeryny.github.io/haehae/markdown/week25/2023/03/06/MC-Review-3.html",
            "relUrl": "/markdown/week25/2023/03/06/MC-Review-3.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Night at the Museum",
            "content": "What I liked . Night at the museum was very fun and I had a great time there. I saw many projects including Rebecca’s project which was a website based on school clubs at our school. She accessed the database and was able to show all the clubs in our school currently along with the type, the teacher, and the room the meetings were in. You could also add reviews on her website. . Another place I went was to the AP Art room where I saw a lot of amazing art and photography! . . The night at the museum was really well organized and I liked how it was obvious where everything was. I really liked the whole event and it was really nice. . What I wish I changed . I wish I could change the due date of the event because if we had more time, I would have been able to make sure that the project was running. I also wish we had like specific stations so it was easier to interact with the different websites because at the place, it was really messy and people were all over the place and it was chaotic. .",
            "url": "https://haeryny.github.io/haehae/markdown/week22/2023/02/17/Night-at-Museum.html",
            "relUrl": "/markdown/week22/2023/02/17/Night-at-Museum.html",
            "date": " • Feb 17, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "5.5-6 Hacks",
            "content": "5.5 Hacks . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . | In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . | Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . | We choose to utilize the MIT License for both my personal blog and the Team CPT Project Repository. The MIT License was chosen for both repositories primarily because it is extremely liberal and encourages the use of open-source software. For instance, in our CSP Community, another group should be able to refer to and even take code snippets from our repository and just quote our names if they are having trouble finding a code snippet to add a feature comparable to anything we have on our group project. . 5.6 Hacks . Describe PII you have seen on project in CompSci Principles. User account login information is one of the main types of PII I have observed in projects in computer science. This includes usernames and passwords for accounts on websites that house crucial user data. | . | What are your feelings about PII and your personal exposure? Personal exposure is, in my opinion, a very real concern in the world of today, and I believe that PII is incredibly essential. This is why it’s crucial that we use strong passwords and maintain our own private information close to hand. | . | Describe good and bad passwords? What is another step that is used to assist in authentication. Strong passwords are those that have some level of difficulty. This entails using passwords that are at least 8 to 10 characters long and contain a mix of special characters, capital and lowercase letters, and digits to make them challenging to decipher. Passwords that are brief and simple to guess are considered bad passwords. Multi-factor authentication, which requires two steps to validate a user’s account creation, login, or deletion, is another step used to help with authentication. The requirement of password complexity when a user establishes an account helps with authentication by ensuring that passwords are secure at the time of creation. | . | Try to describe Symmetric and Asymmetric encryption. In symmetric encryption, information is encrypted and decrypted using the same key. There are two keys used in asymmetric encryption: a public key and a private key. These linked keys provide a more secure way of authenticating. | . | Provide an example of encryption we used in AWS deployment. We used a specific key and our own ports that we created to make sure that there is encryption when we deploy in AWS. | . | Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. One highly popular phishing method is the use of emails. In this method, a common or uninteresting subject is utilized, and an email is sent from an unknown email account requesting you to click a link that will either ask you for personal information or download malware onto your computer. | . |",
            "url": "https://haeryny.github.io/haehae/week21/2023/02/08/5.5-6-Hacks.html",
            "relUrl": "/week21/2023/02/08/5.5-6-Hacks.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "5.3-4 Hacks",
            "content": "5.3 Summary . What is bias in computing? A computer algorithm or software that unfairly favors one input or population over another is said to have computing bias. This can have happened accidentally or on purpose. The HP facial recognition algorithm, which performs better on those with lighter skin tones, is one illustration of computational prejudice. This is probably due to a lack of experience working with persons who have darker skin tones. . 5.4 Summary . Not made intentionally, Because it was created using only data from white people, it can only identify white faces. If everyone had access to computers, issues like this may not arise as frequently, which is another argument for closing the digital divide. This has to be fixed because, in addition to excluding black people from something that only white people have (segregation), you are also losing a sizable market segment. . 5.3-4 Hacks . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . We could develop a platform for coding homework assistance given the high number of computer science students we have. When we are stuck on a particular assignment, we may ask others to email us the relevant sections of their functioning code, post it on the platform, and provide an explanation of the code. We would have the ability to query and be questioned. . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . Our project could be better with crowdsourcing because our website is based on helping people adopt dogs and find a furry friend and by having many people use our website we are able to store reviewes and be able to reflect on this and renew our website to our best version. . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . During N@tM, we could ask students, parents, and teachers to use our website. And we can be able to make a review page and show what they disliked and liked. In addition, we can ask users to comment on any ideas to grow our site for next year. They can comment what they liked, what they think we should improve, and ideas for any additions. .",
            "url": "https://haeryny.github.io/haehae/week21/2023/02/05/5.3-4-Hacks.html",
            "relUrl": "/week21/2023/02/05/5.3-4-Hacks.html",
            "date": " • Feb 5, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Performance Task Blog",
            "content": "Performance Task . For my project for APCSP, I want to make a website that will record your dog’s mood and will be essentially a mood tracker. . The input will change by the person’s response, and based on the person’s stats that will be stored in Info.dB. Then the computer will organize the data into a table and then transform into a graph. . Data Abstraction . The coding in this project will consist of mostly data and storing it through different types of code. I have to limit the input that a person can give to 5 different moods, so it is easier for the code store it. . Managing Complexity . This is still in a work in progress, but the main objective of this idea is to compare data and to organize it by every day, month, and year. I will put the data into a table and develop a procedure, where they will put the information into a table. . Procedural Abstraction . The procedure is storing data through the person’s input, and will be tracking how the person feels while also noticing different types of patterns and major differences in their mood on a daily basis. . Algorithm Implementation . The algorithm will be based on their mood and organize their thoughts. Another feature that can be added to the website is that the person could share why they are in this mood, which will be recorded and can be viewed later. Once this algorithm is developed, it will be thoroughly discussed. . Testing . The testing will be done on video, with me explaining each section, including a written explanation on each section. .",
            "url": "https://haeryny.github.io/haehae/markdown/week20/2023/01/30/Performance-Task.html",
            "relUrl": "/markdown/week20/2023/01/30/Performance-Task.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Practice MC",
            "content": "Collegeboard MC Score . I got 38/50 . Question 21: . I said C which was “The number 10 is displayed” because I thought that it was not limited, but apparently the correct answer was D which was “Nothing is displayed; the program results in an infinite loop.” | . Question 23: . I said D which was “1 2 3 4 5” which is wrong because it displays multiple numbers and it should only display one number so the correct answer is A which is “5.” | . Question 25: . I said C but its is incorrect because the value of the variable j starts at 1 and increases by 2. If is replaced with the expression j = 7, the expression will evaluate to true when j is 7 and the loop will end. The correct answer is A which is j = 6. | . Question 27: . I said A but its is incorrect because it is not supposed to say that n = n + 1. The correct answer is D. | . Question 28: . I said A and D, but it was A and C. D is wrong because after completing the inner Repeat 2 times loop, the robot will be in the center square of the grid facing down. Since this loop is nested inside another Repeat 2 times loop, these commands are executed again. At the end of execution, the robot will be in the same position at which it started. So C and A is correct. | . Question 30: . I said A and C, but it was B and C. A is wrong because it will not draw the circle after (x,y,r). So the correct answer is B and C. | . Question 31: . I said that the answer was A but that is incorrect because if a is 30 and b is 50, the original code segment would result in final values of a equals 30 and b equals 70. However, changing line 7 to b equals 20. would result in final values of a equals 30 and b equals 20. So the correct answer is A | . Question 34: . I said C which was “The number 10 is displayed” because I thought that it was not limited, but apparently the correct answer was D which was “Nothing is displayed; the program results in an infinite loop.” | . Question 36: . I said D which was “1 2 3 4 5” which is wrong because it displays multiple numbers and it should only display one number so the correct answer is A which is “5.” | . Question 40: . I said C but its is incorrect because the value of the variable j starts at 1 and increases by 2. If the condition is replaced with the expression j = 7, the expression will evaluate to true when j is 7 and the loop will end. The correct answer is A which is j = 6. | . Question 43: . I said A but its is incorrect because it is not supposed to say that n = n + 1. The correct answer is D. | . Question 48: . I said A and D, but it was A and C. D is wrong because after completing the inner Repeat 2 times loop, the robot will be in the center square of the grid facing down. Since this loop is nested inside another Repeat 2 times loop, these commands are executed again. At the end of execution, the robot will be in the same position at which it started. So C and A is correct. | .",
            "url": "https://haeryny.github.io/haehae/week20/2023/01/29/Practice-MC.html",
            "relUrl": "/week20/2023/01/29/Practice-MC.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Notes from Presentation",
            "content": "Notes . Listing the purposes of the project | Listing the features and why they are connected to the purpose/project | How the features work, what the limits are and what it is currently doing. What you want to plan for the feature in the future. | Showing how some features can do CRUD What the feature is with the picture and accurate design, screenshots of what the person does | . | Tells roles of the person and what they did specifically for the project | Reason of why they created this project and how it is connected to the community and real world | Talk of the “Model, View, Control Flow” She is showing the API and the users that are created throughout and how the users are used and basically data abstraction used in the program. | Showing the importance of the project | . | She created a search option, an ability to log hours, to add clubs, to show clubs in an organized manner | Showing the basic overview that shows the API and database and the basic coding for backend in general using flow charts. Shows the plan of project development (scrumboard) through spreadsheats | Shows the manifesto | . | .",
            "url": "https://haeryny.github.io/haehae/week19/2023/01/24/Notes-From-Presentation.html",
            "relUrl": "/week19/2023/01/24/Notes-From-Presentation.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "5.1-2 Hacks",
            "content": "5.1 Hacks . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing Beneficial Helps people with planning trips | Gives honest feedback/reviews about different activities and places, which then they could use to improve on those activities and places. | Lets people know the best local and tourist parts of a trip that people should go to. | . | Harmful: Can have biased information | Can potentially spread hate or negative about specific places/people/activities, which would cause those places to be less popular -Can have spam accounts to promote certain places/activities or karens/bots on the website | . | . | Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? Dopamine disorders exist. Whether it is pleasant/beneficial or negative/harmful, when someone engages in behavior that releases dopamine, they will seek that happy sensation again and hence engage in that behavior more frequently. Most likely, an addiction would grow, becoming highly time-consuming and distracting from other significant elements of your life, making it a top priority. | . | . 5.2 Hacks . How does someone empower themselves in a digital world? By developing, inventing, or learning something new digitally and using the internet to distribute it, someone gains influence in the digital world. It is possible for someone to learn a lot about a subject and educate others online. A person becomes more powerful online the more knowledge they possess and the more platforms they have to really share it on. | . | How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. A person with power can assist someone without power by lending them their knowledge and power, or by assisting them in areas or circumstances where they require further assistance. Alternatively, they might just act as a listening ear for the underprivileged individual. I might offer to tutor students at Del Norte High School who want extra assistance in particular topics. Being a mentor or providing a safe place for a kid to talk to is one method a student who is empowered at this school might assist a student who is not. The employees and instructors are sort of higher up on the school hierarchy and have greater credibility. | . | Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? Yes, the government, paper, and red tape all work to prevent digital empowerment. They have the authority to filter or exclude some people’s access to particular material. These obstacles exist everywhere, including Del Norte High School. There are powerful individuals everywhere, including adults over children, instructors over pupils, and more. It is frequently evaluated based on age and experience, which is not necessarily the case. However, there are certain obstacles at this school, such as staff activities that should be disclosed to all students, but information will always be withheld from others in one way or another. | . |",
            "url": "https://haeryny.github.io/haehae/week19/2023/01/24/5.1-2-Hacks.html",
            "relUrl": "/week19/2023/01/24/5.1-2-Hacks.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Frontend Endpoints",
            "content": "Frontend Endpoints . Date Due Name of Class Name of Homework Name of student . 1/22/23 | APCSP | Make A Table | Sean Y | . 1/23/23 | Ap Bio | Portfolio | Ellie P | . 1/20/23 | AP Calc | Pg 123, #1, 2, 3 | Theo H | . 1/20/23 | AP Chem | Lab WriteUp | Haeryn Yu | . 1/12/23 | AP Stats | Questions 1,2,3 | Kaylee H | .",
            "url": "https://haeryny.github.io/haehae/week18/2023/01/23/Frontend-Endpoints.html",
            "relUrl": "/week18/2023/01/23/Frontend-Endpoints.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Create Performance Task 3",
            "content": "Student 1 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | The response earned the point for this row, meeting all six criteria and demonstrates the running of the program, showing input into the program. This is a perfect example on how to earn this point. | . Data Abstraction | 0 | 0 | I agree with collegeboard that this did not earn a point because it does not show all the code in an efficient manner and it is a good reminder to display my code well. | . Managing Complexity | 1 | 0 | I thought that this deserved a point because it had a lot of complexity despite the way collegeboard thinks. | . Procedural Abstraction | 0 | 0 | I agree with collegeboard because it does explicitly explain why this doesn’t work and does not specify how the procedure contributes to the overall program, only stating that it “allows for the program to execute smoothly.” | . Algorithm Implementation | 1 | 1 | Good example of showing this part of the category. | . Testing | 1 | 1 | I agree with colleboard that the testing was done in an efficient manner. | . Student 2 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | The response earned the point for this row, meeting all six criteria and demonstrates the running of the program, showing input into the program. This is a good example of a good performance task. | . Data Abstraction | 1 | 1 | It shows all the code in an efficient manner and it is a good reminder to display my code well.The category met all the requirements. | . Managing Complexity | 1 | 1 | The category met all the requirements. | . Procedural Abstraction | 1 | 1 | The category met all the requirements. | . Algorithm Implementation | 1 | 1 | The category met all the requirements. | . Testing | 1 | 1 | The category met all the requirements. | . Student 3 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | The response earned the point for this row, meeting all six criteria and demonstrates the running of the program, showing input into the program. This is a good example of a good performance task. | . Data Abstraction | 0 | 0 | It does not show the code in an efficient manner and no code is shown to illustrate data being used from the list. This is a good reminder of what not to do. | . Managing Complexity | 0 | 0 | I agree with Collegeboard that the response does not explain how the specific code cannot be written without a list. | . Procedural Abstraction | 0 | 0 | This did not meet any of the categories and is reminder to make my lists with very specific examples. | . Algorithm Implementation | 0 | 0 | This also did not meet any of the requirements and is a good example of what not to do. | . Testing | 0 | 0 | It is rare for a project to get a point off in this category and is a good reminder of what not to do. | . Student 4 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | The category met all the requirements. This student’s project is a good example of what to do. | . Data Abstraction | 1 | 1 | The category met all the requirements. | . Managing Complexity | 1 | 1 | The category met all the requirements. | . Procedural Abstraction | 1 | 1 | The category met all the requirements. | . Algorithm Implementation | 1 | 1 | The category met all the requirements. | . Testing | 1 | 0 | I disagreed with collegeboard because I personally thought that this deserved the point because the showing of the code was done in a good way, however, I now understand that I have to show my testing in a more efficient manner. | .",
            "url": "https://haeryny.github.io/haehae/week18/2023/01/18/Create-Performance-Task-3.html",
            "relUrl": "/week18/2023/01/18/Create-Performance-Task-3.html",
            "date": " • Jan 18, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Database/Model, Backend, OOP, Python",
            "content": "Database and Table Terms . The foundations of database is defining one or more Tables. In Python, a database can be constructed using the foundations we learned in modeling a Class. . A &quot;Table&quot; is a Model/Schema within a Database. | A &quot;Table&quot; definition in Python/SQLAlchemy is manifested by defining a &quot;Class&quot; and &quot;Attributes&quot; in Python. | A Python Class can inherit database functionality from SQLAlchemy. This is a method Python developers use to turn a Class into a Table within a SQL Database. | Writing methods in the Class for Create, Read, Update, Delete (CRUD) is how a developer initiates database operations. | . Reference . SQLAlchemy | Python Backend with Flask, SQLite | Python Backend starting Controller | . Outline for Backend Model and Database . OOP modeling with SQLAlchemy enables CRUD operations. . Users Table Schema | Database Properties . | Initial Database Setup (call) . | Initial Database Setup (add records) . | OOP CRUD operations . | User Table Schema . The db.Model is inherited into the class User(db.model), Each db.Column is provided properties according to capabilities of SQL. See init.py for db object definition. . db = SQLAlchemy(app) . &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; from __init__ import app, db from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &quot;&quot;&quot; Key additions to User Class for Schema definition &quot;&quot;&quot; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # Defines a relationship between User record and Notes table, one-to-many (one user to many notes) posts = db.relationship(&quot;Post&quot;, cascade=&#39;all, delete&#39;, backref=&#39;users&#39;, lazy=True) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, noc, date=date.today(), homeworkName): self._noc = noc # variables with self prefix become part of the object, self._homeworkName = homeworkName self._date = date . def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, &quot;posts&quot;: [post.read() for post in self.posts] } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Sean Y&#39;, uid=&#39;yeung&#39;, password=&#39;123yeung&#39;, dob=date(1995, 2, 3), height=&#39;10 feet&#39;) u2 = User(name=&#39;Ellie P&#39;, uid=&#39;ellie&#39;, password=&#39;123ellie&#39;, dob=date(2007, 11, 1), height=&#39;10 feet&#39;) u3 = User(name=&#39;Kaylee H&#39;, uid=&#39;kaylee&#39;, password=&#39;123kaylee&#39;, dob=date(2005, 10, 30), height=&#39;10 feet&#39;) u4 = User(name=&#39;Theo H&#39;, uid=&#39;theo&#39;, password=&#39;123theo&#39;, dob=date(2006, 1, 31), height=&#39;10 feet&#39;) . from flask import Flask from flask_login import LoginManager from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate &quot;&quot;&quot; These object can be used throughout project. 1.) Objects from this file can be included in many blueprints 2.) Isolating these object definitions avoids duplication and circular dependencies &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) dbURI = &#39;sqlite:////volumes/flask_portfolio.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = dbURI app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy(app) Migrate(app, db) # Images storage app.config[&#39;MAX_CONTENT_LENGTH&#39;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&#39;UPLOAD_EXTENSIONS&#39;] = [&#39;.jpg&#39;, &#39;.png&#39;, &#39;.gif&#39;] # supported file types app.config[&#39;UPLOAD_FOLDER&#39;] = &#39;volumes/uploads/&#39; # location of user uploaded content . Hacks . The Big Picture purpose of this hack is to build a database. Being able to create an SQLite table and populate test data within it is the major goal. To do this effectively it is imperative to show the following. . Build Schema for a table, make a new model file and use users.py as an example. Start slow and simple and build up. | Build an initXXXXX() method and use it to add preliminary/test data to the table. Once again use users.py as an example. | Make a 30-60 second video where you show a Debugging session of making new rows in the table. Use sqlite marketplace tools and/or sqlite3 command line tool to show success in creating table and adding data. | Hack Helper . Here are some tips. . Become familiar with initUsers(). Observe it is called/activated from main.py. This function activates after you run the main.py and activate the web application in the browser. Observe that the sqlite.db file will appear in the volumes directory in conjunction with home screen of site appearing in browser. . | Delete sqlite.db from volumes directory on your development machine. Set breakpoint on initUsers() and run main.py using debug. Use the step into option on the debugger and observe the creation of data. . | . @app.before_first_request def activate_job():initJokes() initUsers() . Make your own XXXXX.py file under model directory. Follow users.py and develop your own schema from the OOP code you did in last Hacks. Follow the pattern in users.py to make a initXXXX() function top populate some test data. . | In main.py, add your initXXXX() method to def activate_job() function shown above. Use this as basis of your video debugging session. Debugging is hugely important at this level to understand your database success prior to building an API. Building initXXXX() method, adding database records, and debugging will enable you to verify CRUD operations as you develop. . | .",
            "url": "https://haeryny.github.io/haehae/week19/2023/01/17/PBL-database.html",
            "relUrl": "/week19/2023/01/17/PBL-database.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Create Performance Task 2",
            "content": "Student 1 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 0 | 0 | I agree with collegeboard on this as the student incorrectly identifies the input and output, and descrived the functionality as the purpose. Thier given purpose was incorrect. | . Data Abstraction | 1 | 0 | I gave a 1 because they did have images of lists and identified a name, however, the name did not correleate to the images provided. | . Managing Complexity | 0 | 0 | Both collegeboard and I gave a 0 for this section and that’s because the images did not show a list being used, and the code was not complex and the sudent did not explain how the list manages complexity | . Procedural Abstraction | 0 | 0 | I agree with collegeboard because the response does not describe how this procedure contributes to the overall functionality | . Algorithm Implementation | 0 | 0 | I gave it a 0 because the description of the program was brief and doesn’t allow for someone to recreate it | . Testing | 1 | 1 | I agree with collegeboard because hte testing met all the requirements. | . Student 2 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | The whole project was perfect and I agree with collegeboard on all of these points. | . Data Abstraction | 1 | 1 |   | . Managing Complexity | 1 | 1 |   | . Procedural Abstraction | 1 | 1 |   | . Algorithm Implementation | 1 | 1 |   | . Testing | 1 | 1 |   | . Student 3 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 1 | 0 | I gave this a 1 in contrary to collegeboard because the student described the function of the program but not its purpose. | . Data Abstraction | 1 | 1 | All the requirments were met. | . Managing Complexity | 1 | 1 | All the requirments were met. | . Procedural Abstraction | 1 | 1 | All the requirments were met. | . Algorithm Implementation | 1 | 1 | All the requirments were met. | . Testing | 1 | 1 | All the requirments were met. | . Student 4 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Good example of how to get a point. | . Data Abstraction | 0 | 0 | I agree with collegeboard because data stored in the list is not being used in the second image. | . Managing Complexity | 0 | 0 | I gave this person also a 0 because the list is not used to manage complexity | . Procedural Abstraction | 1 | 1 | All the requirements were met. | . Algorithm Implementation | 1 | 1 | All the requirements were met. | . Testing | 0 | 0 | This is because the response gives the conditions being tested rather than two different arguments that cause a different segment of code to execute. Arguments should be specific values used in the call to the procedure. | .",
            "url": "https://haeryny.github.io/haehae/week18/2023/01/11/Create-Performance-Task-2.html",
            "relUrl": "/week18/2023/01/11/Create-Performance-Task-2.html",
            "date": " • Jan 11, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Adding DOB Code . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json from datetime import date # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, classOf, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self.classOf = classOf self.dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters #getter @property def classOf(self): return self._classOf #setter @classOf.setter def classOf(self, classOf): self._classOf = classOf #getter @property def dob(self): return self._dob #setter @dob.setter def dob(self, dob): self._dob = dob # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;, classOf: &quot;{self.classOf}&quot;, dob: &quot;{self.dob}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password}, classOf: {self._classOf}, dob:{self.dob})&#39; def tester(users, uid, psw, classOf, dob): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, classOf=&#39;2020&#39;, dob=&#39;2003-11-4&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;, classOf=&#39;1993&#39;, dob=&#39;1979-11-3&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;, classOf=&#39;1865&#39;, dob=&#39;1845-2-21&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;, classOf=&#39;1790&#39;, dob=&#39;1772-4-16&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;, classOf=&#39;2003&#39;, dob=&#39;1988-1-30&#39;) # add things that convert dob to actual date and numbers (WIP) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;, &quot;1865&quot;, &quot;2003-11-4&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;Sean Yeung&quot; u.uid = &quot;sy1055&quot; u.set_password(&quot;123qwerty&quot;) u.classOf = &quot;2013&quot; u.dob = &quot;1995-1-1&quot; u = tester(users, u.uid, &quot;123qwerty&quot;, &quot;2013&quot;, &quot;1995-1-1&quot;) &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$UBW...&#34;, classOf: &#34;2020&#34;, dob: &#34;2003-11-4&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$uw2...&#34;, classOf: &#34;1993&#34;, dob: &#34;1979-11-3&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$FAZ...&#34;, classOf: &#34;1865&#34;, dob: &#34;1845-2-21&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$0ML...&#34;, classOf: &#34;1790&#34;, dob: &#34;1772-4-16&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$s2X...&#34;, classOf: &#34;2003&#34;, dob: &#34;1988-1-30&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$UBW...&#34;, classOf: &#34;2020&#34;, dob: &#34;2003-11-4&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$uw2...&#34;, classOf: &#34;1993&#34;, dob: &#34;1979-11-3&#34; * name: &#34;Sean Yeung&#34;, id: &#34;sy1055&#34;, psw: &#34;sha256$EIZ...&#34;, classOf: &#34;2013&#34;, dob: &#34;1995-1-1&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$0ML...&#34;, classOf: &#34;1790&#34;, dob: &#34;1772-4-16&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$s2X...&#34;, classOf: &#34;2003&#34;, dob: &#34;1988-1-30&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$UBWGxPgcvAchwg2h$d314742687e178b3e9bdf4278888328fd25be3b741d96c89377ccd89b7fc9241&#34;, &#34;_classOf&#34;: &#34;2020&#34;, &#34;_dob&#34;: &#34;2003-11-4&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$uw27BlOzhWz4cwhC$4596730717ba4bc90f886302375fde34c8f0561c4ddaa60206eeb289d7f837ba&#34;, &#34;_classOf&#34;: &#34;1993&#34;, &#34;_dob&#34;: &#34;1979-11-3&#34;}, {&#34;_name&#34;: &#34;Sean Yeung&#34;, &#34;_uid&#34;: &#34;sy1055&#34;, &#34;_password&#34;: &#34;sha256$EIZlZsZAkxySAKs1$9c4e96dc74fcb004a91b4eb3c3bc7d4f48d609b966e1e5b8a1c90f3f547d9b28&#34;, &#34;_classOf&#34;: &#34;2013&#34;, &#34;_dob&#34;: &#34;1995-1-1&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$0MLCOkeUcJbNFl0m$17bdfcb79ee6c79a105124437e07d5c40b6a3f3a7084a0511ab310a60eca7ede&#34;, &#34;_classOf&#34;: &#34;1790&#34;, &#34;_dob&#34;: &#34;1772-4-16&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$s2X8X902N3yWojHb$135fbfb396d1737d23387d6356851960ac7709e65f9122e240a6e05aed4bda47&#34;, &#34;_classOf&#34;: &#34;2003&#34;, &#34;_dob&#34;: &#34;1988-1-30&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$UBWGxPgcvAchwg2h$d314742687e178b3e9bdf4278888328fd25be3b741d96c89377ccd89b7fc9241&#34;, &#34;_classOf&#34;: &#34;2020&#34;, &#34;_dob&#34;: &#34;2003-11-4&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$uw27BlOzhWz4cwhC$4596730717ba4bc90f886302375fde34c8f0561c4ddaa60206eeb289d7f837ba&#34;, &#34;_classOf&#34;: &#34;1993&#34;, &#34;_dob&#34;: &#34;1979-11-3&#34;}, {&#34;_name&#34;: &#34;Sean Yeung&#34;, &#34;_uid&#34;: &#34;sy1055&#34;, &#34;_password&#34;: &#34;sha256$EIZlZsZAkxySAKs1$9c4e96dc74fcb004a91b4eb3c3bc7d4f48d609b966e1e5b8a1c90f3f547d9b28&#34;, &#34;_classOf&#34;: &#34;2013&#34;, &#34;_dob&#34;: &#34;1995-1-1&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$0MLCOkeUcJbNFl0m$17bdfcb79ee6c79a105124437e07d5c40b6a3f3a7084a0511ab310a60eca7ede&#34;, &#34;_classOf&#34;: &#34;1790&#34;, &#34;_dob&#34;: &#34;1772-4-16&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$s2X8X902N3yWojHb$135fbfb396d1737d23387d6356851960ac7709e65f9122e240a6e05aed4bda47&#34;, &#34;_classOf&#34;: &#34;2003&#34;, &#34;_dob&#34;: &#34;1988-1-30&#34;}] . Adding Age Code Hacks . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$qINcDX0qkPPUFYry$1e2bafb974799b8456134281602c0937afc48cc814beea4bdeb8cd2e56bb4c15&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$qINcDX0qkPPUFYry$1e2bafb974799b8456134281602c0937afc48cc814beea4bdeb8cd2e56bb4c15,dob=1847-02-11) . Own Class Hacks . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, height): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._height = height @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name @property def height(self): return self._height # a setter function, allows name to be updated after initial object creation @name.setter def name(self, height): self._height = height # a getter method, extracts email from object @property def uid(self): return self._uid # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;height&quot; : self.height, } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Sean Y&#39;, uid=&#39;yeung&#39;, password=&#39;123yeung&#39;, dob=date(1995, 2, 3), height=&#39;10 feet&#39;) u2 = User(name=&#39;Ellie P&#39;, uid=&#39;ellie&#39;, password=&#39;123ellie&#39;, dob=date(2007, 11, 1), height=&#39;10 feet&#39;) u3 = User(name=&#39;Kaylee H&#39;, uid=&#39;kaylee&#39;, password=&#39;123kaylee&#39;, dob=date(2005, 10, 30), height=&#39;10 feet&#39;) u4 = User(name=&#39;Theo H&#39;, uid=&#39;theo&#39;, password=&#39;123theo&#39;, dob=date(2006, 1, 31), height=&#39;10 feet&#39;) print(&quot;Dictionary&quot;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u2, &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u3, &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u4, &quot; n&quot;) . Dictionary JSON ready string: {&#34;name&#34;: &#34;Sean Y&#34;, &#34;uid&#34;: &#34;yeung&#34;, &#34;dob&#34;: &#34;02-03-1995&#34;, &#34;age&#34;: 27, &#34;height&#34;: &#34;10 feet&#34;} JSON ready string: {&#34;name&#34;: &#34;Ellie P&#34;, &#34;uid&#34;: &#34;ellie&#34;, &#34;dob&#34;: &#34;11-01-2007&#34;, &#34;age&#34;: 15, &#34;height&#34;: &#34;10 feet&#34;} JSON ready string: {&#34;name&#34;: &#34;Kaylee H&#34;, &#34;uid&#34;: &#34;kaylee&#34;, &#34;dob&#34;: &#34;10-30-2005&#34;, &#34;age&#34;: 17, &#34;height&#34;: &#34;10 feet&#34;} JSON ready string: {&#34;name&#34;: &#34;Theo H&#34;, &#34;uid&#34;: &#34;theo&#34;, &#34;dob&#34;: &#34;01-31-2006&#34;, &#34;age&#34;: 16, &#34;height&#34;: &#34;10 feet&#34;} .",
            "url": "https://haeryny.github.io/haehae/week18/2023/01/10/PBL-model.html",
            "relUrl": "/week18/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Create Performance Task 1",
            "content": "Student 1 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 0 | 0 | It does not fit the purpose of the task and does something else entirely, so they should be more specifc in the purpose. | . Data Abstraction | 1 | 1 | I agree with collegeboard with what they say as they met all the requirements. | . Managing Complexity | 0 | 0 | The written response is not specifc at all and does not give any insight into the project, therefore, I agree with collegeboard. | . Procedural Abstraction | 1 | 1 | I completely agree with collegeboard because they dit meet the requirements because the code was inserted correctly. | . Algorithm Implementation | 1 | 1 | I agree with collegeboard that they met all the requirements and they chose specific algorithms with specific variables. | . Testing | 1 | 1 | The student met all the requirements so they get the point. | . Student 2 . Reporting Catergory Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | It completely fits the task and is executed effiiently. | . Data Abstraction | 1 | 1 | I agree with collegeboard with what they say as they met all the requirements. | . Managing Complexity | 1 | 1 | The written response was very specific and gave insight into the project as well provide in-depth information, therefore, I agree with collegeboard. | . Procedural Abstraction | 1 | 1 | I completely agree with collegeboard because they dit meet the requirements because the code was inserted correctly. | . Algorithm Implementation | 1 | 1 | I agree with collegeboard that they met all the requirements and they chose specific algorithms with specific variables. | . Testing | 1 | 1 | The student met all the requirements so they get the point. | .",
            "url": "https://haeryny.github.io/haehae/week7/2023/01/04/Create-Performance-Task-1.html",
            "relUrl": "/week7/2023/01/04/Create-Performance-Task-1.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Student Lesson Grades",
            "content": "Lesson | Grades | . 3.1 &amp; 3.2 | 1/1 | . 3.3 &amp; 3.4 | Presentation: 3.6/4 | . 3.5 - 3.7 | 0.9/1 | . 3.8 &amp; 3.10 | 0.9/1 | . 3.9 &amp; 3.11 | 0.9/1 | . 3.12 &amp; 3.13 | 0.88/1 | . 3.14 &amp; 3.15 | 1/1 | . 3.16 | 1/1 | . 3.17 &amp; 3.18 | 0.9 | .",
            "url": "https://haeryny.github.io/haehae/notes/2022/12/15/Student-Lesson-Grades.html",
            "relUrl": "/notes/2022/12/15/Student-Lesson-Grades.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Video 3.17-18 Hacks",
            "content": "Notes . 3.17.1 . A problem is a description of a task that may or may not be able to be solved through the use of an algorithm. An instance of a problem includes a specific input. One example of this type of problem is a sorting problem. | A decision problem is a problem with a binary answer (yes or no). An optimization problem is a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. | An algorithm&#39;s efficiency is determine through formal or mathematical reasoning. | . It is important to know which algorithm is the most efficient and if the algorithm can work for that specific situation. . 3.17.2 . An algorithm is a process or set of rules to be followed in calculations or other problem-solving operations. . There are four different types of algorithms. . 1 step: The first step consists of an integer being multiplied by a variable &#39;n&#39;. An example of this could be 5 * n. Linear | . | 2 step: A two-step algorithm consists of an integer to the power of the variable &#39;n&#39;. Exponential | . | 3 step: A three-step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. Square | . | 4 step: A four-step algorithm is a variable factorial. For instance, 5! = 5 4 3 2 1 = 120. Factorial | . | . When an algorithm is linear or square, it runs in a reasonable amount of time. However, if the algorithm is exponential or factorial, they are considered to be run in an unreasonable amount of time. A &quot;reasonable amount of time&quot; is when the algorithm increases by smaller values instead of jumping from a lower value to a much higher value. . Run Times . We can categorize the run time of an algorithm according to how the number of steps increases as the input size increases. Does it always take the same amount of time? That&#39;s a constant increase, a very fast run time. Does it always require looking at every possible permutation of the input? That&#39;s an exponential increase, a very slow run time. Most run times are somewhere between. . Constant Time . When an algorithm runs in constant time, it means that it always takes a fixed number of steps, no matter how large the input size increases. . Linear Time . When an algorithm grows in linear time, its number of steps increases in direct proportion to the input size. . Quadratic Time . When an algorithm grows in quadratic time, its steps increase in proportion to the input size squared. Several list sorting algorithms run in quadratic time, like selection sort. That algorithm starts from the front of the list, then keeps finding the next smallest value in the list and swapping it with the current value. . Exponential Time . When an algorithm grows in superpolynomial time, its number of steps increases faster than a polynomial function of the input size. An algorithm often requires superpolynomial time when it must look at every permutation of values. . Polynomial time describes any run time that does not increase faster than n^k which includes Constant time, Quadratic time, and other higher degree polynomials. Superpolynomial time describes any run time that does increase faster than n^k which includes Exponential time and factorial time. So polynomial is considered reasonable. . 3.18 . What is a decidable problem? . These are problems for which algorithms can be written to solve/produce a correct output for all possible inputs. . What is an undecidable problem? . These are problems for which no algorithms can be built that can provide a correct yes or no answer. Undecidable problems may have some instances of algorithmic solutions, but there are no algorithmic solutions that can solve all instances of the problem. . Vocabulary . Undecidable problem:problems for which no algorithms can be built that can provide a correct yes or no answer or a solution | Decidable problem:problems for which algorthms could be written to solve/produce a correct output for all inputs. | . Hacks . Hack 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . Answer: A decidable problem is a problem for which algorithms can be written to solve/produce a correct output for all possible inputs. An example is if checking if a specific number is odd or even. . num = 7 if num % 2 == 1: print(&quot;is odd&quot;) else: print(&quot;is even&quot;) . is odd . An undecidable problem is a problem for which no algorithms can be built that can provide a correct yes or no answer. An example is trying to find what the weather is going to be in a million years, no one can know because no one has traveled a million years. . Hack 2 . Which of the following is a 3 step algorithm? . Answer: It would be C because a 3 step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. and C is (3 x 8)^2 so n = 8 and it squared so it is 3 step. . Hack 3 . Rewrite this JavaScript Code in a more efficient way . Answer: When there were two else&#39;s I just made one shorter and made it more efficient. I tried to use the recursion method but that did not work. I researched more about the recursion method and I realized that it is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code. . function peak_finder(array) let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . Hack 4 . Rewrite this Python Code in a more efficient way . Answer: You can just use the sort function instead of doing all the code to do it from scratch. . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] data.sort() print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Hack 5 . Rewrite this Python Code in a more efficient way . Answer: You can just use the permutations function instead of doing all the code from scratch. . from itertools import permutations comb = permutations([1, 2, 3], 3) for i in comb: print(i) . (1, 2, 3) (1, 3, 2) (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1) .",
            "url": "https://haeryny.github.io/haehae/week6/notes/2022/12/14/3.17-18-Hacks-and-Notes.html",
            "relUrl": "/week6/notes/2022/12/14/3.17-18-Hacks-and-Notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Panel Notes Extra Credit",
            "content": "Kathyleen Beveridge . She believes that in her life it is important to live with compassion. She graduated as a finance major but then switched her career to high-tech. She started at Qualcomm but switched to a more biotech company: Thermo Fisher Scientific. . HP Inc: Create technology that makes life better for everyone, everywhere. | Qualcomm: Inventing the tech the world loves | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer. | . They are all similar in the way where they want to help the world and the community around them. . She prefers high-tech because they all want to improve the world and does not value money and likes how her current company makes a positive impact on the world. .",
            "url": "https://haeryny.github.io/haehae/2022/12/13/Panel-Extra-Credit-Notes.html",
            "relUrl": "/2022/12/13/Panel-Extra-Credit-Notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Video 3.16 Hacks",
            "content": "Simulations . A simulation is an simpler abstraction of an very complicated natural phenomena. It removes details that are unnecessary or are too difficult to simulate. The level of abstraction in a simulation depends on why we&#39;re creating it in the first place. . Why would you make a simulation? . Safer: Many safety hazards that can be encountered through experimentation can be avoided with simulations. Ex: Designing a boat to travel to an island | Less Expensive: Since real world equipment isn’t needed to make and run a simulation (only computer and programmer needed), this makes simulations an inexpensive way to test something. Ex: Boat example again | Repeatable: Once a simulation is created, it’s easy to repeat it to get different but similar results. | Can Make Predictions: Something that can’t be done with experiments is making predictions. Simulations are useful for this because previous data can be used to predict what will happen in the future. Ex: Global population | . Hacks . Question Answer . Name | Haeryn Yu | . 1 | X | . 2 | X | . 3 | C | . 4 | B | . 5 | C | . 6 | A | . 7 | A | . 8 | X | . 9 | B | . Simulation . import random data = [] for i in range(5): one = random.randint(1, 6) two = random.randint(1, 6) d = { &quot;First Dice&quot;: one, &quot;Second Dice&quot;: two} data.append(d) print(data) . [{&#39;First Dice&#39;: 4, &#39;Second Dice&#39;: 1}, {&#39;First Dice&#39;: 3, &#39;Second Dice&#39;: 1}, {&#39;First Dice&#39;: 6, &#39;Second Dice&#39;: 5}, {&#39;First Dice&#39;: 5, &#39;Second Dice&#39;: 3}, {&#39;First Dice&#39;: 2, &#39;Second Dice&#39;: 5}] .",
            "url": "https://haeryny.github.io/haehae/week5/notes/2022/12/13/3.16-Hacks-and-Notes.html",
            "relUrl": "/week5/notes/2022/12/13/3.16-Hacks-and-Notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Video 3.14-15 Hacks",
            "content": "Notes . 3.14 . Software libraries contain procedures used in creating novel programs. | Existing code segments can be derived from internal or external sources: Libraries, Previously written code. | Libraries simplify complex programs. | APIs (application program interfaces) specify how procedures in libraries should behave and be utilized. | Documentation for APIs/Libraries are necessary to gain proper understanding into how to use them. | . Vocabulary . Term Definition . Documentation | Text that explains the what, how, or why of your code. | . Libraries | A collection of prewritten code or procedures that coders can use to maximize their efficiency | . Application Programming Interface | A type of software through several computers are able to communicate information amongst eachother | . 3.15 . Syntax: . In collegeboard psudo-code RANDOM(a, b) is used to generate a random integer value in the range from a to b. For example if RANDOM(1, 5) is written 1, 2, 3, 4, and 5 have the same chance to show up. In Python the random library can be imported and the min and max ranges can be set to any integer. . Randint: . A general way to to write this is randint(start, stop) where start is the minimum value, stop is the maximum value. And this allows you to generate a random integer from a set range and this can help you create code for things like a coin-flip, dice roll, and anything else which needs an inclusive range. . Randrange: . In general randrange can be written like randrange(start, stop, step) where start is the minimum value, stop is the maximum value (like the randint function), and step is the incriment the values can be and its default value is 1. If start = 0 and step = 5 all the values that can by outputed are 0 and multiples of 5. And if start = 2 and step = 3 the output would be 2 and a multiple of 3 plus 2. . Reflection . I learned about the random function and what documentation, libraries, and application programming interfaces are. The random function has three other functions that are syntax, randint, randrange and they all have different purposes and are way more efficient than coding it from the beginning with just python. This lesson was very good and I learned a lot! . Hacks . Multiple Choice . B because the random functions chooses between the range of numbers and it also includes the numbers. | A because x is the number that starts, y is the number that stops, z is the step this is because that is how they are formatted. | A because random:random, random:shuffle, and random:randit exist and are functions in the library, but random:item doesn&#39;t exist. | Short Answer . It is more efficient and speeds up the process of being able to look through the library rather than creating code that has be made for a word that already exists. For example, the randint function is where start is the minimum value and stop is the maximum value so I do not have to make a new piece of code to use that function. | | import random names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) #The function asks for names to input and is the piece of code that makes a list. names = names_string.split(&quot;,&quot;) #This functions helps seperate the names one by one num_items = len(names) #makes the names into a list random_choice = random.randint(0, num_items - 1) #randint is the the function where start is the minimum which is 0 and the stop is maximum which is num_items - 1. person_who_will_pay = names[random_choice] #This chooses the random name print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) #This is the output. . Coding Challenges . Create a program to pick five random names from a list of at least 15 names | import random names = [&quot;John&quot;, &quot;Jake&quot;, &quot;Jack&quot;, &quot;Alex&quot;, &quot;Ryan&quot;, &quot;Jaiden&quot;, &quot;Jayden&quot;, &quot;Jaden&quot;, &quot;Ethan&quot;, &quot;Emily&quot;, &quot;Ella&quot;, &quot;Ellie&quot;, &quot;Hailey&quot;, &quot;Kaylee&quot;, &quot;Bob&quot;] i = 0 print(&quot;5 random names are&quot;) while i &lt; 5: print(random.choice(names)) i += 1 . 5 random names are Jayden Hailey John Ellie Alex . Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins | import random oneFirstRoll = random.randrange(1,6) oneSecondRoll = random.randrange(1,6) oneScore = oneFirstRoll + oneSecondRoll twoFirstRoll = random.randrange(1,6) twoSecondRoll = random.randrange(1,6) twoScore = twoFirstRoll + twoSecondRoll if oneScore &gt; twoScore: print (&quot;Player one won with a score of&quot;,playerOne()) print (&quot;Player two lost with a score of&quot;,playerTwo()) else: print (&quot;Player two won with a score of&quot;,playerTwo()) print (&quot;Player one lost with a score of&quot;,playerOne()) . Player one won with a score of 6 Player two lost with a score of 3 . Extra Credit . import random direction = [&quot;up&quot;, &quot;down&quot;, &quot;left&quot;, &quot;right&quot;] itemDirection = random.choices(direction) print(f&quot;Initial direction of the robot: {itemDirection}&quot;) startNumber = random.randrange(1,25) print(f&quot;Where the robot started: {startNumber}&quot;) goalPosition = [] for i in range(1): r=random.randrange(1,25) if r != startNumber: goalPosition.append(r) print(f&quot;The goal position is: {goalPosition}&quot;) obstacles = [] for i in range(12): r=random.randint(1,25) if r != startNumber: obstacles.append(r) if r != goalPosition: obstacles.append(r) if r not in obstacles: obstacles.append(r) print(f&quot;The obstacles are at: {obstacles}&quot;) ## I tried to make it so the program wouldn&#39;t repeat the same number twice and it worked but it doubles the number. . Initial direction of the robot: [&#39;down&#39;] Where the robot started: 11 The goal position is: [16] The goal position is: [21, 21, 7, 7, 13, 13, 5, 5, 8, 8, 11, 15, 15, 10, 10, 17, 17, 16, 16, 3, 3, 19, 19] .",
            "url": "https://haeryny.github.io/haehae/week5/notes/2022/12/12/3.14-15-Hacks-and-Notes.html",
            "relUrl": "/week5/notes/2022/12/12/3.14-15-Hacks-and-Notes.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Video 3.12-13 Hacks",
            "content": "Notes . 3.12 Notes . What is a procedure and a parameter? . A procedure is a named group of programming instructions that may have parameters and return values. . Procedures can be reffered to as method or function depending on the programing language. . A procedrure call interrupts an execution of statements and makes the program execute the statements in the procedure. | Parameters are input values of a procedure. | . Arguements specifcy the values of the parameters when a procedure is called. . If you have a set of statements and inside there is a procedure then when it reaches that procedure it will excute that procedure and then go back to the rest of the statments. . If you see a return statement you automatically end the procedure even if there is more statements . Procedures are that a catch-all term for codes used to identify what was done to or given to a patient | . If you have a set of statements in a procedure the statement will go thought the top of the procedure to the bottom in order. . 3.13 Notes . Procedure: is a named group of programming instructions that serves a purpose | Parameter: are input values of a procedur | There are two types of procedures, one that returns a value or some type of data and on that just executes a block of statements | Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | . Creating a Procedure . When you are picking a name for the procedure it must be descriptive | See if you need any parameters for this procedure (what data do you need to accomplish my goal? What king of information am I going to need?) | 2 of the parameters in the example below could be the quizGrade and currentPoints (need this data) | One common type of abstraction is procedrual abstraction, which provides a name for a process and allows a procedure to be only knowing what it doe,not how it does it. The subdivision of a computer program into sepearate subprogrames is called modularity. . How do we make our procedure purposeful and consice . to make a procedure serve a purpose it should be able to have multiple functions | Also to keep a procedure maximizing capability it should be simple and reduced to get the final result | . What is important to do while writing procedures . It is important to understand you procudeures procedure does when creating one as it will help you create a impactful procedure . Hacks . 3.12 Part 1 Hacks . Problem 1: This problem involves parameters | . Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed = Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) | . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . False . Problem 3: Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. | . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . 3.12 Homework/Hacks part 2 . a = 729 . the cost is $190.30 . answer = 39.444 . 3.13 Hacks . Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) | if currentrbyards(1260) &gt; toprbyardspg(100) replace(toprbyardspg(100), currentrbyards(1260), totalGames(12)) currentrbyards(1260)/ totalGames(12) = 105 . Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . | Which Is the Correct Way to define the Name of a Procedure? . | B. PROCEDURE MyList . because procedure should be in all caps and part of the procedure name should be capitalized . Write A Procedure That gets the BeachBall To the Green Square PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } |",
            "url": "https://haeryny.github.io/haehae/week4/notes/2022/12/08/3.12-13-Hacks-and-Notes.html",
            "relUrl": "/week4/notes/2022/12/08/3.12-13-Hacks-and-Notes.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Video 3.8-10 Hacks",
            "content": "Notes 3.8-10 . Section 8 . Understanding What is Iteration | Using for and while loops | . Necessary Vocabulary . Iteration - Repitition of a Process | For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated | While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. | Condition - Allows the computer to know whether or not to keep repeating the loop. | increment/decrement - Modifies the counter variable after each repetition. | . What is Iteration? . Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. . In College Board&#39;s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. . The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. . Conceptually, a while loop is very similar to an if conditional, except that a while is continually executed until it&#39;s no longer true and an if is only executed once. . Section 10 . Understanding how to edit lists by adding, inserting, and removing data | Using loops to iterate through lists and abstract data | Determine the results or side effects of iteration statements | Write sorting algorithms using iteration | . Necessary Vocabulary . Indexing / List Index - The position of an element in a list, starting from 0 | append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Elements [in a list] - An item in a list. | Nesting - Having one data type or function inside another data type or function, such as lists or loops. | array - Another name for a list, depends on the language | . What are Lists? . Lists are a collection of data in a sequence that is an iterable | Each sequence is demarcated with an index, starting from 0. This is known as base 0 indexing | In memory, it is stored as a variable name with multiple pointers to each variable stored in a certain order | Lists can also be called arrays | Lists have methods that act upon the list and change them. This moves the pointers within RAM to change the parts of the list. | . Nested Lists . Uses of Nested lists . Placing lists within lists allows you to have arrays of similar data together, and create complexity. . Some uses include: . Creating 2d Arrays | Storing similar, but slightly different categories (sublists) | Create a matrix | . Quiz Score . I got 9/10 right on the quiz, and I got the fourth question wrong. I got it wrong because I thought extend would add something to the list, but extend actually combines two list while append is used to add an element to the end of the list, so that is why I got it wrong. . Excercises . Excercise 1 . Task: Reverse a list utilizing features of lists and iteration | . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list print(&quot;List after reverse : &quot;, reversed_list) . List before reverse : [1, 2, 3, 4, 5] List after reverse : [5, 4, 3, 2, 1] . Excercise 2 . Task: Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array. Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array | . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] .",
            "url": "https://haeryny.github.io/haehae/week3/notes/2022/12/05/3.8-10-Hacks-and-Notes.html",
            "relUrl": "/week3/notes/2022/12/05/3.8-10-Hacks-and-Notes.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Video 3.5-7 Hacks",
            "content": "Unit 3 Section 5 . Learning Objectives . Write expressions with logical operators | Evaluate expressions that use logical operators | . Vocab . Boolean binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; . Relational Operators . There are multiple operators which are used to evaluate 2 variables. In pseudocode the relational operators are =, &gt;, &lt;, ≠, ≥, and ≤. Other languages use different formats to represent these operators. For example, Python uses != instead of ≠. These operators help determine the boolean value of a statement. . Logical Operators . Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. Javascript uses the same logic, but uses different ways to represent the operators: &amp;&amp;(and), | |(or), |(not). . Operators and booleans can be very useful, allowing a program to create an algorithm based on user inputs items stored in list. For example, operators can be used to perform multiple operations on lists. . Unit 3 Section 6 . Learning Objectives . Write conditional statements | Determine the result of conditional statements | . Vocab . Algorithm: Finite set of instructions that accomplish a specific task . Conditional Statements . Conditional statements allow the code to act based on multiple conditions, such as user input or stored data. | We can use conditionals in algorithms in order to receive different outputs from a set of code, and help achieve the general purpose of the algorithm. | . Categories . Two broad types of conditional statements are if statements and if-else statements . if statement: will go through certain statements if the if expression is true | if-else statement: will go through a statement no matter what, but the statement which is run depends on the if expression is true or false | . Flow Charts . We can use flowcharts to help organize the process of conditional statements. | This allows us to diagram the work and have an image of what the process will look like | . A flowchart . We can use this to write pseudocode. . S &lt;-- 12 IF (S MOD 2 = 0) { DISPLAY (S) } ELSE { DISPLAY (&quot;This number is not even.&quot;) } . Converting this to a sequence of python code is very easy thanks to having an easy plan to follow. . Unit 3 Section 7 . Learning Objectives . Write nested conditional statements Determine the result of nested conditional statement . Vocab . Nested conditional: A conditional inside of a conditional . Nested Conditionals . Nested conditionals are often used in algorithms in order to print specific data or run certain tasks. . We can use conditionals inside conditionals to create further conditions in algorithms. . We can use flowcharts to help display an easy to understand diagram of what we want a code segment to do. . Flowchart . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | . 2. 10(D) ≠ 0110(B) . B. False | . 3. 56(D) ≥ 111000(B) . A. True | . 3. 99(D) &lt; 1110011(B) . A. True | . AND Operator Value 1 Value 2 Result . 1 | 0 | 1 | . 1 | 0 | 0 | . 1 | 1 | 0 | . 1 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 0 | . 0 | 0 | 1 | . 0 | 1 | 1 | . 0 | 1 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . # Practice with these statements print(20 == 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &gt; y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z) . True False False . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | 2. How is an if statement different from an if-else statement. . An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If-else statement | 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? 3 print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) if i == &quot;lion&quot;: # What boolean value does this statement cause? 3 print(&quot;It lives in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . It lives in the desert tiger wildebeest Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! shark jellyfish blobfish raven . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . InfoDb = [] # Append to List a Dictionary InfoDb.append({ &quot;foodName&quot;: &quot;Chicken Alfredo&quot;, &quot;meat&quot;: &quot;Chicken&quot;, &quot;timeToPrepare&quot;: &quot;60 minutes&quot;, }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;foodName&quot;: &quot;Cheese Quesadilla&quot;, &quot;meat&quot;: &quot;None&quot;, &quot;timeToPrepare&quot;: &quot;10 minutes&quot;, }) # Append to List a 3rd Dictionary of key/values InfoDb.append({ &quot;foodName&quot;: &quot;Beef Wellington&quot;, &quot;meat&quot;: &quot;Beef&quot;, &quot;timeToPrepare&quot;: &quot;150 minutes&quot;, }) # given and index this will print InfoDb content def print_data(d_rec): print(d_rec[&quot;foodName&quot;], &quot;Time to Prepare:&quot;, d_rec[&quot;timeToPrepare&quot;]) # using comma puts space between values print(&quot;Meat:&quot;, d_rec[&quot;meat&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;&quot;) for record in InfoDb: print_data(record) for_loop() . Chicken Alfredo Time to Prepare: 60 minutes Meat: Chicken Cheese Quesadilla Time to Prepare: 10 minutes Meat: None Beef Wellington Time to Prepare: 150 minutes Meat: Beef . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . They would get 3.0. .",
            "url": "https://haeryny.github.io/haehae/week3/notes/2022/12/04/3.5-7-Hacks-and-Notes.html",
            "relUrl": "/week3/notes/2022/12/04/3.5-7-Hacks-and-Notes.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Video 3.3-4 Hacks",
            "content": "",
            "url": "https://haeryny.github.io/haehae/week2/notes/2022/12/03/3.3-4-Hacks-and-Notes.html",
            "relUrl": "/week2/notes/2022/12/03/3.3-4-Hacks-and-Notes.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Video 3.1-2 Hacks",
            "content": "3.1.1 Notes . Variables and Assignments . Essential Knowledge: . A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. | Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. | Some programming languages provide types to represent data, which are referenced using variables. These types include numbers, Booleans, lists, and strings. | Some values are better suited to representation using one type of datum rather than another. | . What is a variable? . An abstraction inside a program that can hold a value | . An example naming variables . You want to store the highest score you scored in a game. So, you want to call this variable highScore | You want to store a name, so you can call the variable firstName | It is also possible to store true or false in a variable. For example, the variable could be called isSunny, where true and false are stored in the variable. | phoneNumber could be a variable that stores phone numbers. | These examples are short and convenient as opposed to a long description | However, they give insight to the basic goal of the variable. | Spaces also cause a problem because it is not allowed | Dashes and numbers are also less ideal. | . Data Type examples . highScore --&gt; an integer probably doing addition or subtraction, save it as an integer or numbers. | . | firstName --&gt; text(or string) since a name is text, it should be saved as a string | . | isSunny --&gt; boolean only gives two options: true or false within variable | . | phoneNumber --&gt; text(string) no math involved just a string of numbers | . | . Practice . Question: What would be the best variable name and data type to store a user&#39;s age in a program? . Answer: name: age data type: integer | . Q: What would be the best variable name and data type to store the number of students in your class? . A: name: numStudents data type: integer to add and subtract | . Q: What would be the best variable name and data type to store the title of a movie? . A: name: movieTitle data type: text(or string) | . Q: What would be the best variable name and data type to store if someone&#39;s pet is a dog. . A: name: isDog data type: boolean | . 3.1.2 Notes . What will you learn? . You will learn how to determine the value of a variable as a result of an assignment. . Essential Knowledge . The assignment operater allows a program to change the value represented to a variable. | The exam reference sheet uses the &quot;⟵&quot; to use for assignment. For example, Text: a ⟵ expression Then the code would display a block text of &quot;a ⟵ expression&quot;. The code will evaluate expression and then assigns a copy of the result to the variable a. | The value stored in a variable will be the most recent value assigned. For example, . a ⟵ 1 | a ⟵ b | a ⟵ 2 . display(b) . | . | . The code will display 1. . Storing Values . When storing values, you assign them to a variable. . Examples: . highScore ⟵ 100 | The highScore is my assignment operator and it is storing the value of 100 inside itself as a variable. This will set my highScore to 100. | . firstName ⟵ &quot;Ashley&quot; | The firstName is the variable and the text we are storing inside is &quot;Ashley.&quot; We know that the name is in text because of the quotation marks around the assignment. | . isRaining ⟵ true | The isRaining variable has the intention to be a Boolean variable which checks true or false, but it&#39;s been assigned to store the value true. | . phoneNumber ⟵ &quot;555-0101&quot; | The phoneNumber variable and the number we are storing is &quot;555-0101&quot; The number is written within text because we are not planning to do math with this number. | . Additional Vocabulary . Elements: individual value in a list that is assigned a unique index. And elements are referenced by an index. . Index: referencing elements in a list or string using natural numbers . 3.2.2 Notes . Lists . Lists allow for data abstraction . Variables like strings, numbers, characters, and more can be bundled together | It could be empty from the start and you can add more variables as needed | If you set one list equal to another list, or transfer data from one list to another, the data will be completely replaced. | You can also append data from one list to another, keeping the old data and adding the new data. | . Key Vocabulary . list: a sequence of several variables grouped together | variable: a way of storing information in a computer program, which could later be changed, referenced, and used | data types: a set of values and operations on those values | abstract data types: a data type whose internal representation is hidden from the client | client: a program that uses a data type | objects: a structure that can take on a data-type value | Applications programming interface (API): which is a list of constructors and instance methods or operations, used to specify the behavior of an abstract data type | . Big Ideas . Lists can store any types of elements. | In all lists operations, if a list index is less than 1 or greater than the length of the list, an error message is made and the program will terminate. | Data abstraction provides a separation between the abstract properties of a data type and the concrete details of its representation. | 3.1.1 Hacks . Question 1: . The answer is 1 because it is counting a number that is changing so it is integer. | . Question 2: . The answer is 3 because it is a true or false question. | . Question 3: . The answer is 1 because it is a number that is not changing. | . Question 4: . The answer is 2 because it is too long. | . Question 5: . The answer is 1 because it is true or false. | . Question 6: . The answer is 4 because it is true statements. | . Practice Questions I made: . To check if the weather is good or not, what should it be? It is weatherGood and boolean | To record the highest test score, what should it be? It is highTestScore and string | To record the color of the phone, what should it be? It is phoneColor and string | 3.1.2 Hacks . I got the last question wrong, and that&#39;s because I forgot which order it went and that it does not repeat at all. I now know that the correct answer is because the variables have values thanks to the previous five statements. In the sixth sentence, b is given the value of x + b, which is 40. The seventh sentence gives a the value of x + 1, or 21. The value of c + d / 2 is assigned to d in the ninth sentence. Division takes priority over addition in the order of operations. The number 50 is given to d since c is 30 and d / 2 is 20. The values of a, b, c, and d are shown in the final four assertions. . Practice Questions I made: . Question 1 | . num1 &lt;- 8 . num2 &lt;- 3 . num2 &lt;- num1 + num2 . DISPLAY(num2) = 11 . Question 2 | . A &lt;- 4 . B &lt;- 5 . X &lt;- A . DISPLAY(B) = 5 . Question 3 | . Y &lt;- 1 . Z &lt;- 2 . W &lt;- Y . DISPLAY(W) = 1 . Question 4 | . T &lt;- 45 . D &lt;- 12 . X &lt;- T + D . DISPLAY(X) = 57 . Question 5 | . testA &lt;- 40 . testB &lt;- 50 . testC &lt;- 60 . testAll &lt;- testA + testB + testC . DISPLAY(testAll) = 150 . Question 6 | . labD &lt;- 1 . labE &lt;- 2 . labD &lt;- labE . DISPLAY(B) = 1 . 3.2.2 Hacks . Question 1: 7 . Question 2: 11 . Question 3: 107 . Question 4: 1100 . Question 5: 101100 . Question 6: 11111110 . Question 7: 4 . Question 8: 1 . Question 9: 3 . Question 10: 4 . Question 11: 4 . Question 12: 2 . Question 13: 3 . Question 14: 2 . Question 15: 6 .",
            "url": "https://haeryny.github.io/haehae/week2/notes/2022/12/02/3.1-2-Hacks-and-Notes.html",
            "relUrl": "/week2/notes/2022/12/02/3.1-2-Hacks-and-Notes.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Binary Hacks",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Binary Converter",
            "url": "https://haeryny.github.io/haehae/2022/10/28/Binary-Hacks.html",
            "relUrl": "/2022/10/28/Binary-Hacks.html",
            "date": " • Oct 28, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://haeryny.github.io/haehae/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page7": {
          "title": "Vocabulary",
          "content": "Unit 2 Binary/Data Terms . bits: the minimum unit of binary information stored in a computer system. A bit can have only two states, on or off, which are commonly represented as ones and zeros. In our binary markdown we used to change the number of bits. . | bytes: A group of eight bits put together is known as a byte. A byte consists of 256 different combinations if you include the number 00000000 — all the binary numbers between 00000000 and 11111111. . | hexadecimal/nibbles: Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters – A, B, C, D, E and F. For example, when we use Javascript to change the color of the background on our blogs, we use hexadecimals like #eb4034, which would give us a red color. . | RGB- Hexadecimal is basically a short code for RGB color, they are simply different ways of communicating the same thing – a red, green, and blue color value. For example, (235, 64, 52) is the RGB for RED. Here’s an example of how it is implemented in our fastpages: a { color: rgb(255,255, 255) !important; } . | boolean- value that is either true or false . | ASCII- is a character encoding standard for electronic communication. . | Unicode- is an information technology standard for the consistent encoding, representation, and handling of text expressed in most of the world’s writing systems. . | Data Compression- is the process of encoding, restructuring or otherwise modifying data in order to reduce its size. . | Lossy- in which unnecessary information is discarded. . | Lossless- is a class of data compression algorithms that allows the original data to be perfectly reconstructed from the compressed data. . | . Unit 3 Algorithm/Programming Terms . variables- A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. Some programming languages provide types to represent data, which are referenced using variables. . | data types- integer, string, float, boolean, lists, dictionaries, arrays, etc. . | lists- Lists are used to store multiple items in a single variable. . | dictionaries- A dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value. . | . A plus sign indicates addition: a + b . A subtraction sign indicates subtraction: a - b . An asterisk/star indicates multiplication: a * b . A slash indicates division: a / b . MOD represent the Modulus operator. Returns the value after division: a MOD b . algorithms- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. . | sequence- a section of code is run only if a condition is met. (ex: if statements) . | selection- repeating steps or instructions over and over again (ex: loops) . | iteration- outline or set of steps that we do and follow in order that they are given . | strings- a sequence of characters . | concatenation- combines two or more strings into one . | length- len function finds the number of characters in a string . | substring- a part of a existing string . | upper- upper() method returns the uppercase string from the given string. It converts all lowercase characters to uppercase. . | lower- lower() method returns the lowercase string from the given string. It converts all uppercase characters to lowercase. . | comparison operators- Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. . | Truth tables- A truth table is a way of summarizing and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. . | if statement- will go through certain statements if the if expression is true . | if-else- will go through a statement no matter what, but the statement which is run depends on the if expression is true or false . | elif- elif is short for “else if” and is used when the first if statement isn’t true, but you want to check for another condition. Meaning, if statements pair up with elif and else statements to perform a series of checks. . | nested selection statements- Nested selection structures are used when more than one decision must be made before carrying out a task. Nesting is a programming activity, in which one program block is placed inside other program block of the same operation type. Nesting processes are mostly used implemented in the selection control structures. . | For Loop: repeats a function for a set number of times; I is the number of times repeated. With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc. . | While Loop: the while loop is used to repeat a section of code an unknown number of times until a specific condition is met. A while loop will execute a set of statements as long as a condition is true. . | return values: The value that a function returns to the caller is generally known as the function’s return value. All Python functions have a return value, either explicit or implicit. . | class- A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions. Like function definitions begin with the def keyword in Python, class definitions begin with a class keyword. . | parameters- Parameters are the variables that appear between the brackets in the “def” line of a Python function definition. . | procedural abstraction- One good use of a procedure is to eliminate duplicate code. In addition to improving the readability of the app, the use of a procedure will make it easier to modify that chunk of code because it only occurs once in the program. Use of parameters and complexity. . | python def procedures- A procedure allows us to group a block of code under a name, known as a procedure name. . | .",
          "url": "https://haeryny.github.io/haehae/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://haeryny.github.io/haehae/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}